[
{
	"uri": "//localhost:1313/vi/1-introduce-aws/1.1-computeservices/",
	"title": "Dịch vụ điện toán",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Dịch vụ điện toán Amazon Web Services Các dịch vụ điện toán do AWS cung cấp cung cấp khả năng tính toán có thể mở rộng cho nhiều khối lượng công việc khác nhau, cho phép doanh nghiệp triển khai và quản lý ứng dụng một cách hiệu quả trên đám mây. Sau đây là phần giới thiệu về một số dịch vụ điện toán chính do AWS cung cấp.\nNội dung 1. Amazon EC2 (Elastic Compute Cloud): Amazon EC2 là một dịch vụ web cung cấp khả năng tính toán có thể thay đổi kích thước trên đám mây. Nó cho phép người dùng nhanh chóng tăng hoặc giảm quy mô dựa trên nhu cầu, chỉ trả tiền cho những tài nguyên họ sử dụng. Người dùng có thể chọn từ nhiều loại phiên bản được tối ưu hóa cho các khối lượng công việc khác nhau, chẳng hạn như phiên bản có mục đích chung, tối ưu hóa điện toán, tối ưu hóa bộ nhớ và tối ưu hóa lưu trữ. Bạn có thể sử dụng phiên bản EC2 cho nhiều ứng dụng, bao gồm lưu trữ web, phát triển ứng dụng, xử lý dữ liệu và AI.\n**Các loại phiên bản EC2 ** Dưới đây là một số ví dụ có mục đích chung mà từ đó chúng ta có thể chọn:\nT2. micro: Phiên bản nổi tiếng nhất trong AWS là t2. micro, cung cấp 1 CPU và 1 GB bộ nhớ với hiệu suất mạng từ thấp đến trung bình. Nó cũng miễn phí và rất hữu ích cho những cá nhân mới bắt đầu sử dụng AWS.\rM6a Instance: Bộ xử lý AMD EPYC thế hệ thứ ba được sử dụng trong phiên bản M6 là hoàn hảo cho các tác vụ đa năng. Trong m6a có nhiều kích thước khác nhau như m6a.large, m6a.2xlarge, m6a.4xlarge, v.v. m6a lớn cung cấp 2 CPU, bộ nhớ 8GiB và hiệu suất mạng lên tới 12,5 Gigabit.\rM5 instance: Thế hệ phiên bản đa năng mới nhất, được gọi là M5, được trang bị bộ xử lý Xeon Platinum 8175 của Intel. Các phân khu M5 của nó bao gồm m5. lớn, m5.12xlarge và m5.24 lớn và loại dịch vụ M5 mà chúng tôi chọn sẽ phụ thuộc vào bộ nhớ, CPU, bộ lưu trữ và tốc độ mạng.\rDùng trong hoàn cảnh nào? Ứng dụng Máy chủ Web: Máy chủ web có thể được lưu trữ trong các phiên bản đa dụng. Phiên bản EC2 cung cấp nền tảng linh hoạt và có thể mở rộng cho các ứng dụng web. Môi trường thử nghiệm và phát triển: Nhà phát triển có thể sử dụng các phiên bản đa năng này để xây dựng, thử nghiệm và triển khai ứng dụng. Đây là một giải pháp tiết kiệm chi phí để vận hành môi trường này.\nPhân phối nội dung: Có thể lưu trữ các mạng phân phối nội dung (CDN) phân phối nội dung cho người dùng trên toàn thế giới bằng cách sử dụng các phiên bản có mục đích chung. Phiên bản EC2 có thể được thiết lập để cung cấp nội dung có độ trễ thấp và hiệu suất cao. Là một lựa chọn phổ biến cho nhiều doanh nghiệp, phiên bản đa năng AWS EC2 cung cấp nền tảng linh hoạt và có thể mở rộng cho nhiều ứng dụng.\n2. AWS Lambda: AWS Lambda là dịch vụ điện toán không có máy chủ do Amazon Web Services (AWS) cung cấp, cho phép người dùng chạy mã mà không cần cung cấp hay quản lý máy chủ. Nó cho phép các nhà phát triển tập trung vào việc viết mã cho ứng dụng của họ mà không phải lo lắng về cơ sở hạ tầng cơ bản. Dưới đây là tổng quan chi tiết về AWS Lambda:\nServerless Computing: Với Lambda, người dùng có thể tải code của họ lên và AWS sẽ đảm nhiệm việc cung cấp, mở rộng quy mô và quản lý cơ sở hạ tầng cần thiết để chạy mã đó. Người dùng chỉ bị tính phí cho thời gian tính toán mà mã của họ sử dụng, tính bằng mili giây, khiến Lambda trở thành giải pháp tiết kiệm chi phí cho nhiều khối lượng công việc khác nhau.\nKiến trúc hướng sự kiện(Event-Driven Architecture): Hàm Lambda được gọi để phản hồi các sự kiện như yêu cầu HTTP, thay đổi dữ liệu trong bộ chứa Amazon S3, cập nhật lên bảng Amazon DynamoDB, tin nhắn từ Amazon SNS(Simple Notification Service), và nhiều dịch vụ khác. Kiến trúc hướng sự kiện này cho phép các nhà phát triển xây dựng các ứng dụng có khả năng phản hồi và có thể mở rộng nhằm đáp ứng các thay đổi hoặc trình kích hoạt trong thời gian thực.\nThời gian chạy và ngôn ngữ được hỗ trợ(Supported Runtimes and Languages): Lambda hỗ trợ nhiều ngôn ngữ lập trình bao gồm Node.js, Python, Java, Go, .NET Core và Ruby, cho phép các nhà phát triển sử dụng ngôn ngữ ưa thích của họ để viết các hàm Lambda. Mỗi hàm Lambda chạy trong một môi trường biệt lập gọi là \u0026ldquo;thời gian chạy\u0026rdquo;, cung cấp các phần phụ thuộc và thư viện cần thiết cho ngôn ngữ đã chọn.\nTự động mở rộng (Automatic Scaling): Lambda tự động điều chỉnh quy mô môi trường thực thi để xử lý các yêu cầu hoặc sự kiện đến. Nó có thể xử lý một vài yêu cầu mỗi ngày đến hàng nghìn yêu cầu mỗi giây mà không cần bất kỳ sự can thiệp thủ công nào. Việc thay đổi quy mô được AWS xử lý dựa trên số lượng sự kiện đến và cài đặt đồng thời đã định cấu hình.\nThực thi phi trạng thái(Stateless Execution): Hàm Lambda không có trạng thái, nghĩa là chúng không duy trì bất kỳ trạng thái liên tục nào giữa các lần gọi. Mỗi lệnh gọi hàm Lambda độc lập với các lệnh gọi trước đó. Nếu cần có sự duy trì trạng thái, nhà phát triển có thể sử dụng các dịch vụ lưu trữ bên ngoài như Amazon DynamoDB hoặc Amazon S3 để lưu trữ và truy xuất thông tin trạng thái.#### Integration with AWS Services:\nLambda tích hợp liền mạch với các dịch vụ AWS khác, cho phép nhà phát triển xây dựng các ứng dụng và quy trình làm việc phức tạp. Ví dụ: hàm Lambda có thể được sử dụng để xử lý dữ liệu từ Amazon S3, kích hoạt thông báo qua Amazon SNS hoặc tương tác với cơ sở dữ liệu Amazon RDS.\nAWS cung cấp khả năng tích hợp tích hợp với nhiều dịch vụ khác nhau thông qua AWS SDK và các nguồn sự kiện, giúp dễ dàng kết nối các chức năng Lambda với các tài nguyên AWS khác. Kiểm soát bảo mật và truy cập(Security and Access Control):\nCác hàm Lambda có thể được bảo mật bằng chính sách AWS IAM (Quản lý danh tính và quyền truy cập), chính sách này kiểm soát ai có thể gọi hàm và những tài nguyên nào hàm đó có thể truy cập. Nhà phát triển cũng có thể sử dụng AWS Key Management Service (KMS) để mã hóa dữ liệu nhạy cảm trong các hàm Lambda hoặc sử dụng các biến môi trường để lưu trữ cài đặt cấu hình một cách an toàn.\nSử dụng lambda trong tình huống nào? ** Kiến trúc Microservices (Microservices Architecture):**\nCác hàm Lambda có thể được sử dụng để triển khai các vi dịch vụ trong kiến ​​trúc serverless, trong đó mỗi hàm đại diện cho một thành phần hoặc chức năng cụ thể của ứng dụng. Bằng cách chia nhỏ ứng dụng của bạn thành các chức năng nhỏ hơn, độc lập, bạn có thể đạt được khả năng mở rộng, tính linh hoạt và khả năng bảo trì tốt hơn, đồng thời giảm chi phí hoạt động của việc quản lý cơ sở hạ tầng.\nXử lý dữ liệu thời gian thực (Real-time Data Processing):\nLambda rất phù hợp cho các tác vụ xử lý dữ liệu theo thời gian thực như xử lý luồng, làm giàu dữ liệu và phân tích. Nó có thể được sử dụng để xử lý dữ liệu phát trực tuyến từ các dịch vụ như Amazon Kinesis và Amazon Managed Streaming cho Apache Kafka (Amazon MSK). Bằng cách xử lý dữ liệu trong thời gian thực với Lambda, bạn có thể rút ra thông tin chuyên sâu, kích hoạt hành động và đưa ra quyết định dựa trên thông tin cập nhật, hỗ trợ các ứng dụng phản ứng và dựa trên dữ liệu.\nNhiệm vụ theo lịch trình và công việc định kỳ(Scheduled Tasks and Cron Jobs):\nCác hàm Lambda có thể được lên lịch để chạy theo các khoảng thời gian được chỉ định bằng cách sử dụng CloudWatch Events hoặc EventBridge (trước đây là CloudWatch Events). Điều này làm cho Lambda trở thành một giải pháp thuận tiện để chạy các tác vụ theo lịch trình, tác vụ định kỳ và tác vụ xử lý hàng loạt mà không cần đến máy chủ hoặc cơ sở hạ tầng chuyên dụng. Bạn có thể sử dụng Lambda để thực hiện sao lưu dữ liệu định kỳ, tạo báo cáo, dọn dẹp tài nguyên hoặc thực hiện bất kỳ tác vụ định kỳ nào khác.\nMáy chủ Backend Web(Web Application Backends):\nLambda có thể đóng vai trò là phần phụ trợ cho các ứng dụng web, xử lý các yêu cầu HTTP và thực thi logic ứng dụng để phản hồi. Khi kết hợp với API Gateway, Lambda cho phép các nhà phát triển xây dựng API RESTful không máy chủ một cách nhanh chóng và dễ dàng. Các hàm Lambda có thể xử lý việc xác thực người dùng, xác thực dữ liệu, logic nghiệp vụ và tương tác cơ sở dữ liệu, cung cấp giải pháp có thể mở rộng và tiết kiệm chi phí để phát triển ứng dụng web.\n3. Amazon ECS (Elastic Container Service): Amazon ECS là dịch vụ điều phối bộ chứa được quản lý toàn phần, cho phép người dùng chạy, dừng và quản lý bộ chứa Docker trên một cụm phiên bản EC2. Người dùng có thể dễ dàng triển khai, quản lý và mở rộng quy mô các ứng dụng được đóng gói bằng ECS. Nó tích hợp với các dịch vụ AWS khác như Cân bằng tải đàn hồi, IAM và CloudWatch để nâng cao chức năng. ECS cho phép người dùng xây dựng kiến ​​trúc vi dịch vụ và hiện đại hóa ứng dụng của họ bằng cách tận dụng các vùng chứa.\n4. Amazon EKS (Elastic Kubernetes Service): Amazon EKS là dịch vụ Kubernetes được quản lý toàn phần giúp dễ dàng triển khai, quản lý và mở rộng quy mô ứng dụng trong bộ chứa bằng Kubernetes trên AWS. Nó cung cấp một mặt phẳng điều khiển Kubernetes có tính sẵn sàng cao và an toàn mà không cần phải quản lý cơ sở hạ tầng. Với Amazon EKS, người dùng có thể chạy các ứng dụng Kubernetes bằng cùng công cụ và API mà họ sử dụng tại chỗ, đồng thời hưởng lợi từ khả năng mở rộng và độ tin cậy của AWS.Xử lý dữ liệu theo thời gian thực:.\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce-aws/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Amazon Web Service Tổng quan AWS là viết tắt của Amazon Web Service. Đây là một nền tảng điện toán đám mây toàn diện và được sử dụng rộng rãi do Amazon.com cung cấp. Ra mắt vào năm 2006, AWS cung cấp một loạt dịch vụ bao gồm sức mạnh tính toán, tùy chọn lưu trữ, khả năng kết nối mạng, cơ sở dữ liệu, machine learning và các công cụ AI, cùng nhiều dịch vụ khác, tất cả đều được cung cấp qua internet.\nCác doanh nghiệp và cá nhân có thể tận dụng AWS để xây dựng và triển khai các ứng dụng và dịch vụ với độ linh hoạt, khả năng mở rộng và độ tin cậy cao hơn so với cơ sở hạ tầng tại chỗ truyền thống. AWS hoạt động theo mô hình định giá trả theo mức sử dụng, cho phép người dùng chỉ trả tiền cho những tài nguyên họ tiêu thụ, điều này có thể giúp giảm chi phí và tối ưu hóa chi tiêu.\nMột số tính năng và lợi ích chính của AWS bao gồm:\nKhả năng mở rộng: AWS cho phép người dùng tăng hoặc giảm quy mô tài nguyên dựa trên nhu cầu, đảm bảo hiệu suất tối ưu và tiết kiệm chi phí.\nĐộ tin cậy: AWS cung cấp cơ sở hạ tầng có độ tin cậy cao với các trung tâm dữ liệu đặt tại các khu vực trên khắp thế giới, cung cấp khả năng dự phòng và đảm bảo tính sẵn sàng cao.\nBảo mật: AWS sử dụng các biện pháp bảo mật mạnh mẽ để bảo vệ dữ liệu và cơ sở hạ tầng, bao gồm mã hóa, quản lý danh tính và quyền truy cập cũng như chứng nhận tuân thủ.\nTính linh hoạt: Với nhiều dịch vụ và cấu hình sẵn có, AWS có thể đáp ứng khối lượng công việc và trường hợp sử dụng đa dạng, từ lưu trữ web đơn giản đến phân tích dữ liệu phức tạp.\nPhạm vi tiếp cận toàn cầu: AWS hoạt động ở nhiều khu vực địa lý, cho phép người dùng triển khai các ứng dụng gần người dùng cuối hơn để có độ trễ thấp hơn và hiệu suất được cải thiện.\nTóm Tắt: AWS đã trở thành nền tảng của điện toán đám mây hiện đại, hỗ trợ hàng triệu doanh nghiệp và tổ chức trên toàn thế giới với bộ dịch vụ và giải pháp cơ sở hạ tầng phong phú.\nNội dung Giới thiệu về dịch vụ chìa khóa mà chúng tôi sẽ sử dụng trong labs hands-on:\nDịch vụ điện toán Dịch vụ lưu trữ Dịch vụ cơ sở dữ liệu Dịch vụ mạng "
},
{
	"uri": "//localhost:1313/vi/1-introduce-aws/1.2-storageservices/",
	"title": "Dịch vụ lưu trữ",
	"tags": [],
	"description": "",
	"content": "Giới thiệu dịch vụ lưu trữ AWS AWS cung cấp một bộ dịch vụ lưu trữ toàn diện được thiết kế để đáp ứng nhu cầu đa dạng của các doanh nghiệp và nhà phát triển, từ lưu trữ đối tượng đơn giản đến lưu trữ khối hiệu suất cao.\nNội dung 1. Amazon S3 Storage(Dịch vụ lưu trữ đơn giản): Amazon S3 là dịch vụ lưu trữ đối tượng có khả năng mở rộng được thiết kế để lưu trữ và truy xuất mọi lượng dữ liệu từ mọi nơi trên web. Nó có độ bền cao, an toàn và tiết kiệm chi phí. S3 cung cấp các tính năng như lập phiên bản, mã hóa, kiểm soát truy cập và quản lý vòng đời để quản lý dữ liệu một cách hiệu quả.\nNó thường được sử dụng cho nhiều trường hợp sử dụng, bao gồm sao lưu và khôi phục, lưu trữ dữ liệu, phân phối nội dung và lưu trữ các trang web tĩnh.\nLớp lưu trữ đối tượng(Object Storage Classes): Amazon S3 Standard (S3 Standard): S3 Standard cung cấp khả năng lưu trữ đối tượng có độ bền cao, tính khả dụng và hiệu suất cao cho dữ liệu được truy cập thường xuyên. Vì mang lại độ trễ thấp và thông lượng cao nên S3 Standard phù hợp với nhiều trường hợp sử dụng khác nhau, bao gồm ứng dụng đám mây, trang web động, phân phối nội dung, ứng dụng di động và trò chơi cũng như phân tích dữ liệu lớn.\nCác tính năng chính:\nLưu trữ mục đích chung cho dữ liệu được truy cập thường xuyên Độ trễ thấp và hiệu suất thông lượng cao Được thiết kế để cung cấp mức độ khả dụng 99,99% với SLA khả dụng là 99,9% Amazon S3 Intelligent-Tiering (S3 Intelligent-Tiering): thường được viết tắt là S3 Intelligence-Tiering, là lớp lưu trữ được Amazon Web Services (AWS) giới thiệu cho Dịch vụ lưu trữ đơn giản (S3) của họ. Nó được thiết kế để tự động tối ưu hóa chi phí lưu trữ bằng cách di chuyển dữ liệu giữa hai tầng truy cập: truy cập thường xuyên và truy cập không thường xuyên, dựa trên mô hình sử dụng.\nCách thức hoạt động của Phân bậc thông minh S3 (S3 Intelligent-Tiering):\nPhân bậc tự động (Automatic Tiering): S3 Phân bậc thông minh tự động giám sát các kiểu truy cập dữ liệu của bạn và di chuyển các đối tượng giữa hai tầng truy cập: truy cập thường xuyên và truy cập không thường xuyên. Dữ liệu được truy cập thường xuyên vẫn ở cấp truy cập thường xuyên, trong khi dữ liệu không được truy cập trong một khoảng thời gian sẽ được chuyển sang cấp truy cập không thường xuyên.\nTối ưu hóa chi phí(Cost Optimization): Bằng cách tự động di chuyển dữ liệu giữa các tầng truy cập, S3 Phân bậc thông minh giúp tối ưu hóa chi phí lưu trữ. Bạn không cần quản lý thủ công việc di chuyển dữ liệu giữa các tầng, giảm chi phí vận hành.\nKhông có phí truy xuất ( No Retrieval Fees): Không giống như một số lớp lưu trữ khác trong S3, Phân bậc thông minh S3 không phát sinh phí truy xuất khi truy cập dữ liệu từ bậc truy cập không thường xuyên. Điều này làm cho nó đặc biệt hiệu quả về mặt chi phí đối với dữ liệu có kiểu truy cập không thể đoán trước..\nĐộ bền vững và tính khả dụng(Durability and Availability): S3 Phân bậc thông minh cung cấp độ bền và tính khả dụng cao tương tự như các lớp lưu trữ S3 khác, đảm bảo rằng dữ liệu của bạn được bảo vệ trước các lỗi phần cứng và có thể truy cập được khi cần.\nGiám sát và phân tích(Monitoring and Analytics): AWS cung cấp các công cụ để giám sát và phân tích các mẫu truy cập dữ liệu của bạn được lưu trữ trong Phân bậc thông minh S3. Điều này cho phép bạn hiểu rõ hơn về việc sử dụng dữ liệu của mình và đưa ra quyết định sáng suốt về tối ưu hóa bộ nhớ.\nSử dụng S3 trong tình huống nào? Sao lưu và lưu trữ dữ liệu: S3 cung cấp giải pháp đáng tin cậy và tiết kiệm chi phí để lưu trữ các bản sao lưu và lưu trữ dữ liệu. Độ bền cao của nó đảm bảo dữ liệu được an toàn trong thời gian dài, khiến nó trở nên lý tưởng cho các yêu cầu lưu trữ lâu dài.\nLưu trữ trang web tĩnh: S3 có thể lưu trữ các trang web tĩnh bằng cách lưu trữ HTML, CSS, JavaScript và các nội dung web khác. Nó tích hợp hoàn hảo với các dịch vụ AWS khác như Amazon Route 53 để định tuyến DNS và Amazon CloudFront để phân phối nội dung, cho phép lưu trữ trang web nhanh chóng và có thể mở rộng quy mô.\nPhân phối nội dung: S3 kết hợp với Amazon CloudFront cho phép bạn phân phối nội dung trên toàn cầu với độ trễ thấp và tốc độ truyền cao. Điều này hữu ích khi phân phối các tệp lớn, phương tiện truyền phát trực tuyến hoặc nội dung trang web cho người dùng trên toàn thế giới.\nLưu trữ dữ liệu ứng dụng: Nhiều ứng dụng sử dụng S3 làm kho lưu trữ trung tâm cho nhiều loại dữ liệu khác nhau, chẳng hạn như nội dung do người dùng tạo, tệp phương tiện, nhật ký ứng dụng và tệp cấu hình. Khả năng mở rộng và độ tin cậy của S3 giúp nó phù hợp để lưu trữ khối lượng lớn các loại dữ liệu đa dạng.\nPhân tích dữ liệu lớn: S3 đóng vai trò là hồ dữ liệu để lưu trữ lượng lớn dữ liệu có cấu trúc và phi cấu trúc có thể được phân tích bằng các dịch vụ phân tích AWS như Amazon Athena, Amazon Redshift Spectrum hoặc AWS Glue. Dữ liệu được lưu trữ trong S3 có thể được truy vấn trực tiếp mà không cần di chuyển dữ liệu.\nKhôi phục sau thảm họa: S3 có thể là một phần của chiến lược khắc phục thảm họa, trong đó các bản sao lưu dữ liệu quan trọng được lưu trữ trong các nhóm S3 trên các khu vực AWS khác nhau. Trong trường hợp xảy ra thảm họa, dữ liệu có thể được khôi phục nhanh chóng từ S3 để duy trì hoạt động kinh doanh liên tục.\nKho dữ liệu: S3 có thể hoạt động như một khu vực tổ chức cho dữ liệu được đưa vào kho dữ liệu như Amazon Redshift hoặc Amazon Athena. Dữ liệu trước tiên được tải vào S3, sau đó được xử lý bởi các dịch vụ phân tích, cho phép lưu trữ dữ liệu có thể mở rộng và tiết kiệm chi phí.\nỨng dụng di động và IoT: S3 thường được sử dụng làm phụ trợ lưu trữ cho các ứng dụng di động và IoT để lưu trữ nội dung, dữ liệu cảm biến và nhật ký ứng dụng do người dùng tạo. Khả năng mở rộng và khả năng tương thích với AWS SDK giúp dễ dàng tích hợp với nhiều nền tảng ứng dụng khác nhau.\n2. Amazon EBS (Elastic Block Store): Amazon Elastic Block Store (EBS) là dịch vụ lưu trữ cấp khối do Amazon Web Services (AWS) cung cấp, được thiết kế để sử dụng với các phiên bản Amazon EC2 (Elastic Computing Cloud).\nBlock-Level Storage:\nAmazon EBS cung cấp các ổ lưu trữ cấp khối tương tự như ổ cứng vật lý hoặc SSD, cho phép người dùng tạo và đính kèm các ổ lưu trữ vào phiên bản EC2. Các ổ đĩa này xuất hiện dưới dạng thiết bị khối thô đối với phiên bản EC2 và có thể được định dạng và gắn kết giống như bất kỳ thiết bị lưu trữ khối nào khác. Persistence and Durability:\nEBS volumes được thiết kế cho độ bền và độ tin cậy. Dữ liệu được lưu trữ trên các ổ đĩa EBS được sao chép trong cùng Vùng sẵn sàng để đảm bảo độ bền của dữ liệu. EBS volumes được giữ lâu dài, nghĩa là dữ liệu vẫn tồn tại ngay cả sau khi phiên bản EC2 liên kết bị chấm dứt. Người dùng có thể tách các ổ đĩa EBS khỏi một phiên bản EC2 và gắn chúng vào một phiên bản EC2 khác mà không làm mất dữ liệu. High Performance:\nEBS volumes cung cấp các tùy chọn lưu trữ hiệu suất cao, bao gồm ổ đĩa hỗ trợ SSD (EBS-SSD) và ổ đĩa từ tính (EBS-HDD), để đáp ứng yêu cầu hiệu suất của các khối lượng công việc khác nhau. SSD-backed volumes cung cấp độ trễ thấp và IOPS (Hoạt động đầu vào/đầu ra mỗi giây) cao cho các ứng dụng đòi hỏi hiệu suất cao, trong khi ổ đĩa từ tính cung cấp khả năng lưu trữ tiết kiệm chi phí cho khối lượng công việc ít đòi hỏi hơn. Snapshot and Backup:\nEBS volumes hỗ trợ Snapshot, là bản sao lưu tại thời điểm của dữ liệu ổ đĩa được lưu trữ trong Amazon S3. Người dùng có thể tạo ảnh chụp nhanh của khối EBS theo cách thủ công hoặc tự động bằng cách sử dụng ảnh chụp nhanh theo lịch trình. Snapshot tăng dần, nghĩa là chỉ các khối đã thay đổi kể từ ảnh chụp nhanh cuối cùng mới được lưu trữ, giúp giảm chi phí lưu trữ và thời gian sao lưu. Encryption and Security:\nEBS volumes hỗ trợ mã hóa bằng AWS Key Management Service (KMS), cho phép người dùng mã hóa dữ liệu ở trạng thái lưu trữ để đáp ứng các yêu cầu về tuân thủ và bảo mật. Người dùng cũng có thể chỉ định cài đặt mã hóa khi tạo khối EBS mới hoặc mã hóa các khối hiện có bằng ảnh chụp nhanh. Scalability and Flexibility:\nEBS volumes có thể được thay đổi kích thước một cách linh hoạt mà không có bất kỳ thời gian ngừng hoạt động nào, cho phép người dùng mở rộng quy mô dung lượng lưu trữ dựa trên việc thay đổi yêu cầu khối lượng công việc. Người dùng có thể chọn từ nhiều loại và kích thước ổ đĩa khác nhau để đáp ứng nhu cầu về hiệu suất và dung lượng cho ứng dụng của mình. Integration with AWS Services\nEBS volumes có thể được tích hợp với các dịch vụ AWS khác như Amazon EC2, Amazon RDS (Dịch vụ cơ sở dữ liệu quan hệ) và AWS Lambda để cung cấp dung lượng lưu trữ cho nhiều loại ứng dụng và khối lượng công việc khác nhau. Sử dụng EBS trong trường hợp nào? Amazon Elastic Block Store (EBS) được sử dụng trong nhiều trường hợp cần lưu trữ bền vững và có thể mở rộng cho các ứng dụng chạy trên một phiên bản Amazon EC2 duy nhất 3. Amazon EFS (Elastic File System) Amazon EFS là dịch vụ lưu trữ tệp được quản lý hoàn toàn và có thể mở rộng, được thiết kế để cung cấp quyền truy cập chia sẻ và có thể mở rộng vào các tệp từ nhiều phiên bản EC2. Nó hỗ trợ giao thức NFS (Hệ thống tệp mạng) và có thể được tích hợp liền mạch với các ứng dụng và quy trình công việc hiện có.\nEFS phù hợp với các trường hợp sử dụng như quản lý nội dung, xử lý phương tiện, phát triển phần mềm và phân tích dữ liệu yêu cầu lưu trữ tệp dùng chung.\nSử dụng EFS trong trường hợp nào? Amazon EFS thường được sử dụng trong các trường hợp nhiều phiên bản EC2 cần quyền truy cập chung vào một hệ thống tệp chung. Nó cung cấp giải pháp lưu trữ tập trung và có thể mở rộng cho các ứng dụng yêu cầu lưu trữ tệp chia sẻ\n4. Amazon FSx (Lưu trữ tệp) Amazon FSx cung cấp các dịch vụ lưu trữ tệp được quản lý toàn phần, được tối ưu hóa cho các trường hợp sử dụng cụ thể, bao gồm Amazon FSx dành cho Windows File Server và Amazon FSx dành cho Lustre. FSx dành cho Máy chủ tệp Windows cung cấp tính năng chia sẻ tệp Windows có tính sẵn sàng cao, được quản lý đầy đủ, trong khi FSx dành cho Lustre cung cấp hệ thống tệp hiệu suất cao cho khối lượng công việc tính toán chuyên sâu.\nFSx phù hợp với các ứng dụng yêu cầu hệ thống tệp hiệu suất cao hoặc lưu trữ tệp tương thích với Windows cho các khối lượng công việc tính toán chuyên sâu như học máy và mô phỏng.\nSử dụng FSx trong trường hợp nào? Amazon FSx for Windows File Server được sử dụng trong các trường hợp người dùng cần một hệ thống tệp tương thích với Windows được quản lý hoàn toàn có hỗ trợ giao thức SMB (Server Message Block). Nó cung cấp một hệ thống tệp Windows được quản lý đầy đủ và có thể mở rộng, có thể truy cập được từ các máy khách Windows, Linux và macOS, giúp nó phù hợp để chia sẻ và cộng tác tệp trên các nền tảng khác nhau. "
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/2.1.8-cicd-auto-deploy-static-page-with-github/",
	"title": "Hands-on Lab",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Amazon Web Service Nội dung "
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/2.1.9.-cicd-integration-with-codebuild-auto-deploy-lambda-function/",
	"title": "Hands-on Lab",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Amazon Web Service Nội dung "
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/2.1.1.-create-vpc-subnet-route-table/",
	"title": "Tạo VPC, Subnet, Route Table",
	"tags": [],
	"description": "",
	"content": "Tổng quan Hãy cùng đi sâu vào các khái niệm về VPC, Subnet, Route Table và Security Group:\n1.1 Đám mây riêng ảo (VPC):\nVirtual Private Cloud (VPC) là môi trường mạng ảo được cung cấp bởi Amazon Web Services (AWS).\nNó cho phép bạn cung cấp một phần riêng biệt về mặt logic của đám mây AWS nơi bạn có thể khởi chạy các tài nguyên AWS như phiên bản EC2, cơ sở dữ liệu RDS và hàm Lambda.\nVới VPC, bạn có toàn quyền kiểm soát môi trường mạng của mình, bao gồm dải địa chỉ IP, mạng con, bảng định tuyến và cổng mạng.\nVPC cung cấp bảo mật bằng cách cho phép bạn xác định chính sách kiểm soát truy cập mạng, thiết lập kết nối VPN và sử dụng các nhóm bảo mật cũng như ACL mạng để hạn chế lưu lượng truy cập.\nMạng con 1.2:\nMạng con là một phần được phân đoạn trong dải địa chỉ IP của VPC mà bạn có thể đặt tài nguyên AWS trong đó.\nMạng con cho phép bạn tổ chức các tài nguyên trong VPC và xác định các phân đoạn mạng riêng biệt với cấu hình định tuyến, chính sách kiểm soát truy cập và vùng khả dụng của riêng chúng.\nMỗi mạng con được liên kết với một vùng sẵn sàng (AZ) cụ thể trong một khu vực và các tài nguyên được triển khai trong mạng con đó nằm trong AZ tương ứng.\nMạng con có thể là công khai hoặc riêng tư, tùy thuộc vào việc chúng có đường dẫn đến cổng internet hay không.\n1.3 Bảng lộ trình:\nBảng định tuyến là một bộ quy tắc (tuyến đường) xác định nơi lưu lượng mạng được hướng tới trong VPC.\nMỗi mạng con trong VPC phải được liên kết với một bảng định tuyến, bảng này xác định cách thức lưu lượng truy cập vào và ra khỏi mạng con.\nBảng lộ trình chứa các tuyến đến các đích cụ thể, chẳng hạn như cổng internet, cổng riêng ảo (dành cho kết nối VPN), kết nối ngang hàng VPC hoặc cổng NAT.\nBằng cách định cấu hình các tuyến trong bảng tuyến, bạn có thể kiểm soát cách lưu lượng truy cập giữa các mạng con trong VPC và với các mạng bên ngoài.\n1.4 Nhóm bảo mật:\nNhóm bảo mật hoạt động như một tường lửa ảo cho các phiên bản của bạn để kiểm soát lưu lượng vào và ra.\nNó hoạt động ở cấp độ phiên bản và có thể được liên kết với nhiều phiên bản trong một VPC.\nNhóm bảo mật cho phép bạn xác định các quy tắc cho phép hoặc từ chối lưu lượng truy cập dựa trên giao thức, cổng và địa chỉ IP.\nTheo mặc định, tất cả lưu lượng truy cập vào đều bị từ chối và tất cả lưu lượng truy cập ra đều được phép, nhưng bạn có thể tùy chỉnh các quy tắc này để đáp ứng các yêu cầu bảo mật cụ thể của mình.\nNhóm bảo mật có trạng thái, nghĩa là nếu bạn cho phép lưu lượng truy cập cho một giao thức và cổng cụ thể thì lưu lượng quay lại sẽ tự động được phép bất kể quy tắc gửi đi.\nTóm lại, VPC cung cấp môi trường mạng biệt lập trong AWS, mạng con cho phép bạn phân chia VPC thành các mạng nhỏ hơn, bảng định tuyến xác định cách định tuyến lưu lượng trong VPC và các nhóm bảo mật kiểm soát luồng lưu lượng đến và đi từ phiên bản của bạn. Các thành phần này phối hợp với nhau để cung cấp cơ sở hạ tầng mạng an toàn và có thể mở rộng trên đám mây AWS.\nThực hành Hãy Tạo VPC làm theo hướng dẫn bên dưới: Truy cập https://us-east-1.console.aws.amazon.com/vpcconsole/home?region=us-east-1#vpcs Chọn Create VPC Chọn VPC and More Chọn IPv4 CIDR: 10.0.0.0/16 Chọn AZ: 1 Chọn number public subnet 1 Chọn private subnet 1 Chọn NAT gateway: none, vì chúng tôi đang kết nối trong tài nguyên AWS nên không cần kết nối internet. Cổng NAT phù hợp với tài nguyên của bên thứ ba trên internet Sau khi hoàn thành các tùy chọn này, hãy nhấp vào Tạo VPC. Chờ một phút để cung cấp tài nguyên, Sau khi hoàn tất, chúng ta có một vpc như hình trên. "
},
{
	"uri": "//localhost:1313/vi/2-hands-on/",
	"title": "Thực Hành AWS",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Xin chào các bạn, Tôi là Đạo, hiện đang làm kỹ sư phần mềm,tôi mới tìm hiểu về điện toán đám mây được vài tháng. May mắn thay, tôi cũng đã lấy được chứng chỉ AWS Solution Architect Associate, chứng chỉ này giúp tôi hiểu tổng quan về AWS, cải thiện tư duy phát triển hệ thống của mình và đóng vai trò là bước đệm để quá trình thực hành suôn sẻ hơn. Tôi quyết định tạo một trang web để chia sẻ những gì tôi biết về quá trình học điện toán đám mây trong 100 ngày. Tôi tin rằng với nỗ lực không ngừng học hỏi của mình, chúng ta sẽ sớm làm chủ được điện toán đám mây. Học đám mây một cách sớm nhất và sâu sắc nhất, hãy cùng tôi tìm hiểu nhé. Nội dung Liệt kê các phòng thí nghiệm thực hành Days1 Xây dựng ứng dụng không có máy chủ "
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/",
	"title": "Xây dựng ứng dụng Serverless",
	"tags": [],
	"description": "",
	"content": "Tổng quan Dự án ứng dụng Take Note là một ứng dụng không có máy chủ được thiết kế để cung cấp cho người dùng một nền tảng thuận tiện để ghi và quản lý ghi chú. Được xây dựng bằng dịch vụ AWS, dự án tận dụng các hàm Lambda cho logic phụ trợ và DynamoDB để lưu trữ dữ liệu. Ngoài ra, nó còn tích hợp với GitHub để triển khai tự động bằng AWS CodeBuild.\nCác thành phần và tính năng chính của Dự án ứng dụng Take Note bao gồm:\nKiến trúc không có máy chủ: Dự án tuân theo kiến trúc không có máy chủ, loại bỏ nhu cầu quản lý máy chủ và cơ sở hạ tầng. Các hàm AWS Lambda được sử dụng để thực thi logic phụ trợ nhằm phản hồi các sự kiện được kích hoạt bởi hành động của người dùng. Hàm Lambda: Hàm Lambda đóng vai trò là xương sống của ứng dụng, xử lý nhiều chức năng khác nhau như tạo, truy xuất, cập nhật và xóa ghi chú. Các chức năng này được thiết kế để tự động mở rộng quy mô dựa trên nhu cầu, đảm bảo tính sẵn sàng cao và hiệu suất tối ưu. Tích hợp DynamoDB: DynamoDB được sử dụng làm cơ sở dữ liệu NoSQL để lưu trữ và quản lý dữ liệu ghi chú. Việc tích hợp giữa các hàm Lambda và DynamoDB cho phép tương tác liền mạch với cơ sở dữ liệu, cho phép người dùng lưu trữ và truy xuất ghi chú của họ một cách hiệu quả. Tích hợp GitHub: Dự án sử dụng AWS CodeBuild để tích hợp và triển khai liên tục (CI/CD) bằng cách tích hợp với kho lưu trữ GitHub. Bất cứ khi nào thay đổi được đẩy tới kho lưu trữ GitHub, CodeBuild sẽ tự động kích hoạt quá trình xây dựng, đảm bảo rằng phiên bản mới nhất của ứng dụng được triển khai trên môi trường AWS. Xác thực và ủy quyền người dùng: Ứng dụng có thể kết hợp các cơ chế xác thực và ủy quyền người dùng để đảm bảo quyền truy cập an toàn vào dữ liệu ghi chú. Điều này có thể đạt được bằng cách sử dụng AWS Cognito để quản lý và xác thực người dùng, cho phép người dùng đăng nhập an toàn và truy cập ghi chú của họ với các quyền thích hợp. Giao diện người dùng: Mặc dù không được đề cập rõ ràng nhưng dự án có thể bao gồm giao diện người dùng, chẳng hạn như ứng dụng web hoặc ứng dụng di động, qua đó người dùng tương tác với Ứng dụng Take Note. Giao diện này giao tiếp với các hàm Lambda phụ trợ để thực hiện các thao tác CRUD trên các ghi chú được lưu trữ trong DynamoDB. Tổng quan:, Dự án ứng dụng Take Note thể hiện sức mạnh và tính linh hoạt của kiến trúc serverless trong việc xây dựng các ứng dụng có thể mở rộng và tiết kiệm chi phí. Bằng cách tận dụng các dịch vụ AWS như Lambda, DynamoDB, CodeBuild và các dịch vụ tiềm năng khác, dự án cung cấp nền tảng mạnh mẽ để người dùng quản lý ghi chú của họ một cách liền mạch, đồng thời tự động hóa quy trình triển khai cho quy trình phát triển hợp lý.\nNội dung 2.1.1 Tạo VPC, Mạng con, Bảng định tuyến\n2.1.2. Tạo điểm cuối VPC\n2.1.3. Phát triển hàm Lambda bằng ngôn ngữ Java\n2.1.4. Tạo hàm Lambda và triển khai\n2.1.5. Tạo DynamoDB\n2.1.6. Tạo Cổng API\n2.1.7. Giao diện người dùng phát triển\n2.1.8 CICD Tự động triển khai trang tĩnh bằng GitHub\n2.1.9. Tích hợp CICD với CodeBuild Tự động triển khai hàm Lambda\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce-aws/1.3-databaseservice/",
	"title": "Dịch Vụ Cơ Sở Dữ Liệu",
	"tags": [],
	"description": "",
	"content": "Giới Thiệu Dịch Vụ Cơ Sở Dữ Liệu Amazon Web Services (AWS) cung cấp một bộ dịch vụ dựa trên đám mây toàn diện, bao gồm các dịch vụ Cơ sở dữ liệu dưới dạng dịch vụ (DBaaS) rất phổ biến. Dịch vụ cơ sở dữ liệu của AWS cung cấp cho người dùng các giải pháp có thể mở rộng, đáng tin cậy và tiết kiệm chi phí để quản lý nhiều loại dữ liệu khác nhau , từ các cặp khóa-giá trị đơn giản đến cơ sở dữ liệu quan hệ phức tạp. Các dịch vụ này được thiết kế để hợp lý hóa các tác vụ quản lý cơ sở dữ liệu, nâng cao hiệu suất và đảm bảo tính sẵn sàng và bảo mật cao.\nAWS cung cấp một số dịch vụ cơ sở dữ liệu, mỗi dịch vụ phục vụ cho các trường hợp sử dụng và yêu cầu khối lượng công việc khác nhau Contents Amazon RDS (Relational Database Service): Amazon Relational Database Service (Amazon RDS) là dịch vụ cơ sở dữ liệu được quản lý do Amazon Web Services (AWS) cung cấp nhằm đơn giản hóa quá trình thiết lập, vận hành và mở rộng quy mô cơ sở dữ liệu quan hệ trên đám mây. Với Amazon RDS, người dùng có thể triển khai, quản lý và mở rộng quy mô các công cụ cơ sở dữ liệu quan hệ phổ biến như MySQL, PostgreSQL, MariaDB, Oracle và SQL Server mà không cần chi phí quản trị đáng kể.\nTính năng chính:\nDịch vụ được quản lý: Amazon RDS là dịch vụ được quản lý toàn phần, nghĩa là AWS xử lý các tác vụ quản trị cơ sở dữ liệu thông thường như cung cấp phần cứng, thiết lập cơ sở dữ liệu, vá lỗi, sao lưu và giám sát. Điều này cho phép người dùng tập trung vào việc xây dựng ứng dụng hơn là quản lý cơ sở hạ tầng.\nNhiều công cụ cơ sở dữ liệu: Amazon RDS hỗ trợ một số công cụ cơ sở dữ liệu quan hệ phổ biến, bao gồm MySQL, PostgreSQL, MariaDB, Oracle và SQL Server. Người dùng có thể chọn công cụ phù hợp nhất với yêu cầu ứng dụng của mình và tận dụng các công nghệ cơ sở dữ liệu quen thuộc.\nKhả năng mở rộng: Amazon RDS cho phép người dùng dễ dàng tăng hoặc giảm quy mô phiên bản cơ sở dữ liệu của mình dựa trên nhu cầu khối lượng công việc thay đổi. Người dùng có thể tăng hoặc giảm tài nguyên điện toán và lưu trữ mà không có thời gian ngừng hoạt động, cho phép khả năng mở rộng liền mạch khi mức sử dụng ứng dụng biến động.\nTính sẵn sàng cao: Amazon RDS cung cấp các tính năng tích hợp sẵn có tính sẵn sàng cao như sao lưu tự động, chuyển đổi dự phòng tự động và triển khai Multi-AZ. Triển khai Multi-AZ sao chép dữ liệu trên nhiều vùng sẵn sàng để cung cấp khả năng chịu lỗi cũng như đảm bảo độ bền và tính khả dụng của dữ liệu trong trường hợp xảy ra lỗi hoặc ngừng hoạt động phần cứng.\nBảo mật: Amazon RDS cung cấp các tính năng bảo mật mạnh mẽ để bảo vệ dữ liệu được lưu trữ trong cơ sở dữ liệu. Chúng bao gồm mã hóa khi lưu trữ và đang truyền, cách ly mạng bằng Amazon VPC, tích hợp xác thực IAM và kiểm soát truy cập phiên bản cơ sở dữ liệu.\nGiám sát và tối ưu hóa hiệu suất: Amazon RDS cung cấp các công cụ và số liệu giám sát hiệu suất thông qua Amazon CloudWatch, cho phép người dùng giám sát hiệu suất cơ sở dữ liệu, đặt cảnh báo và khắc phục sự cố về hiệu suất. Người dùng cũng có thể tận dụng các tính năng như Bản sao chỉ có quyền đọc và Amazon Aurora để cải thiện hiệu suất và khả năng mở rộng.\nBảo trì tự động: Amazon RDS tự động hóa các tác vụ bảo trì cơ sở dữ liệu định kỳ như vá lỗi phần mềm, cung cấp phần cứng và sao lưu. Điều này đảm bảo rằng cơ sở dữ liệu luôn được cập nhật với các bản vá bảo mật và tối ưu hóa mới nhất mà không cần can thiệp thủ công.\nHiệu quả về chi phí: Amazon RDS cung cấp mô hình định giá trả theo mức sử dụng, trong đó người dùng chỉ trả tiền cho những tài nguyên họ sử dụng hàng giờ. Điều này giúp giảm chi phí ban đầu và cho phép mở rộng quy mô một cách hiệu quả về mặt chi phí dựa trên mô hình sử dụng thực tế.\nAmazon Aurora: Aurora là công cụ cơ sở dữ liệu quan hệ tương thích với MySQL và PostgreSQL được xây dựng cho đám mây. Nó cung cấp hiệu suất cao, khả năng mở rộng và tính khả dụng, với các tính năng như sao lưu tự động, giám sát liên tục và sao chép đa vùng.\nTính năng chính:\n- Hiệu suất: Theo trang web chính thức, Aurora cung cấp thông lượng lên tới 5x của MySQL và 3x thông lượng của PostgreSQL.\nĐiểm chuẩn này cho thấy Aurora có thể nhanh hơn RDS 60 lần.\nAurora cung cấp hiệu suất ghi tốt hơn vì nó giảm thiểu khả năng khuếch đại ghi bằng cách chỉ gửi nhật ký làm lại đến dịch vụ lưu trữ từ xa, giúp loại bỏ các hoạt động ghi khác trong đường dẫn cam kết giao dịch, chẳng hạn như bộ đệm ghi kép khét tiếng.\nAurora cung cấp khả năng mở rộng đọc tốt hơn nhờ kiến ​​trúc dựa trên nhật ký, nó có thể hỗ trợ tới 15 bản sao đọc. RDS chỉ có thể hỗ trợ 5, RDS không hỗ trợ nhiều hơn vì bản sao phát trực tuyến cổ điển chịu nhiều ảnh hưởng về hiệu suất hơn ở bản chính. Aurora cũng có độ trễ sao chép thấp hơn nhiều, đặc biệt là khi chịu tải nặng khi ghi.\n- Khả năng mở rộng: Aurora có khả năng mở rộng cao, cho phép bạn dễ dàng tăng hoặc giảm kích thước phiên bản cơ sở dữ liệu nếu cần. Nó có thể tự động thay đổi quy mô dung lượng lưu trữ lên tới 64 TB cho mỗi phiên bản cơ sở dữ liệu và hỗ trợ tới 15 bản sao chỉ có quyền đọc để có khả năng mở rộng quy mô đọc.\n- Tính sẵn sàng cao: Aurora cung cấp tính sẵn sàng cao và khả năng chịu lỗi tích hợp. Nó sao chép dữ liệu trên nhiều Vùng sẵn sàng (AZ) trong một khu vực, đảm bảo rằng cơ sở dữ liệu của bạn vẫn khả dụng ngay cả trong trường hợp AZ bị lỗi.\n- Độ bền: Aurora tự động sao lưu liên tục cơ sở dữ liệu của bạn vào Amazon S3, đảm bảo độ bền của dữ liệu và cho phép khôi phục tại một thời điểm bất kỳ trong quá khứ trong tối đa 35 ngày.\n- Khả năng tương thích: Aurora tương thích với MySQL và PostgreSQL, cho phép bạn sử dụng các công cụ và công cụ cơ sở dữ liệu quen thuộc đồng thời tận dụng lợi ích về hiệu suất và khả năng mở rộng của Aurora.\n- Bảo mật: Aurora cung cấp các tính năng bảo mật mạnh mẽ, bao gồm cách ly mạng bằng Amazon VPC, mã hóa khi lưu trữ và đang truyền bằng AWS Key Management Service (KMS) cũng như kiểm soát truy cập chi tiết bằng vai trò IAM và quyền cấp cơ sở dữ liệu.\n- Hiệu quả về chi phí: Aurora được thiết kế để tiết kiệm chi phí, với mô hình định giá thanh toán theo mức sử dụng dựa trên mức sử dụng cơ sở dữ liệu thực tế của bạn. Nó giúp tiết kiệm chi phí đáng kể so với cơ sở dữ liệu tại chỗ truyền thống, đặc biệt đối với khối lượng công việc có nhu cầu luôn biến động.\nAmazon DynamoDB: Amazon DynamoDB là dịch vụ cơ sở dữ liệu NoSQL được quản lý hoàn toàn do Amazon Web Services (AWS) cung cấp. Nó được thiết kế để cung cấp khả năng mở rộng liền mạch, hiệu suất cao và truy cập dữ liệu có độ trễ thấp cho các ứng dụng yêu cầu thời gian phản hồi một phần nghìn giây. Một số tính năng chính của Amazon DynamoDB bao gồm:\nTính năng chính:\nĐược quản lý hoàn toàn: DynamoDB là dịch vụ được quản lý toàn phần, nghĩa là AWS xử lý các tác vụ như cung cấp phần cứng, thiết lập, cấu hình, sao chép, vá lỗi phần mềm và sao lưu. Điều này cho phép các nhà phát triển tập trung vào việc xây dựng ứng dụng mà không cần lo lắng về quản lý cơ sở hạ tầng.\nKhả năng mở rộng: DynamoDB được thiết kế để dễ dàng mở rộng quy mô nhằm đáp ứng khối lượng công việc và khối lượng dữ liệu khác nhau. Nó tự động điều chỉnh quy mô cả khả năng đọc và ghi dựa trên mẫu lưu lượng truy cập của ứng dụng của bạn và có thể xử lý hàng nghìn tỷ yêu cầu mỗi ngày trên hàng nghìn phân vùng.\nHiệu suất: DynamoDB cung cấp thời gian phản hồi mili giây nhất quán, ở mức một chữ số cho các thao tác đọc và ghi, bất kể kích thước dữ liệu hay mức lưu lượng truy cập. Điều này làm cho nó phù hợp với các ứng dụng có độ trễ thấp yêu cầu truy cập dữ liệu nhanh.\nMô hình dữ liệu linh hoạt: DynamoDB hỗ trợ cả mô hình dữ liệu khóa-giá trị và dữ liệu tài liệu, cho phép bạn lưu trữ và truy vấn dữ liệu có cấu trúc, bán cấu trúc hoặc phi cấu trúc. Nó cũng cung cấp hỗ trợ cho các kiểu dữ liệu lồng nhau, cấu trúc dữ liệu phức tạp và truy vấn dựa trên tài liệu.\nBảo mật và tuân thủ: DynamoDB cung cấp các tính năng bảo mật mạnh mẽ, bao gồm mã hóa khi lưu trữ và đang truyền, kiểm soát truy cập chi tiết bằng chính sách AWS Identity and Access Management (IAM) cũng như tích hợp với AWS Key Management Service (KMS) cho quản lý các khóa mã hóa. Nó cũng tuân thủ các tiêu chuẩn và quy định khác nhau của ngành, chẳng hạn như HIPAA, GDPR và PCI DSS.\nSao lưu và khôi phục tự động: DynamoDB tự động sao lưu dữ liệu của bạn và duy trì các bản sao lưu gia tăng trong tối đa 35 ngày, cho phép bạn khôi phục cơ sở dữ liệu của mình vào bất kỳ thời điểm nào trong khoảng thời gian đó. Điều này giúp bảo vệ khỏi mất dữ liệu và cung cấp cơ chế khắc phục thảm họa.\nBảng toàn cầu: Bảng toàn cầu DynamoDB cho phép bạn sao chép dữ liệu của mình trên nhiều Khu vực AWS trên toàn thế giới, cho phép truy cập dữ liệu có độ trễ thấp cho các ứng dụng được phân phối trên toàn cầu. Nó tự động đồng bộ hóa dữ liệu giữa các khu vực, cung cấp khả năng sẵn sàng cao và khắc phục thảm họa.\nLuồng: Luồng DynamoDB ghi lại các thay đổi đối với dữ liệu của bạn trong thời gian thực và cho phép bạn xử lý những thay đổi này bằng AWS Lambda hoặc các khung xử lý luồng khác. Tính năng này hữu ích để xây dựng kiến ​​trúc hướng sự kiện, triển khai đồng bộ hóa dữ liệu và kích hoạt quy trình làm việc dựa trên các bản cập nhật cơ sở dữ liệu.\nAmazon Redshift: Amazon Redshift là dịch vụ kho dữ liệu quy mô petabyte được quản lý toàn phần do Amazon Web Services (AWS) cung cấp. Nó được thiết kế để phân tích hiệu suất cao các bộ dữ liệu lớn bằng cách sử dụng các truy vấn SQL. Một số tính năng chính của Amazon Redshift bao gồm:\nTính năng chính:\nLưu trữ cột: Redshift lưu trữ dữ liệu ở định dạng cột, được tối ưu hóa cao độ cho khối lượng công việc phân tích. Điều này cho phép nén dữ liệu hiệu quả, giảm I/O và hiệu suất truy vấn nhanh hơn so với các hệ thống lưu trữ theo hàng truyền thống.\nXử lý song song lớn (MPP): Redshift phân phối dữ liệu và xử lý truy vấn trên nhiều nút trong một cụm, cho phép thực hiện song song các truy vấn. Kiến trúc này cho phép Redshift mở rộng quy mô theo chiều ngang khi khối lượng dữ liệu và truy vấn của bạn tăng lên, mang lại hiệu suất ổn định bất kể kích thước tập dữ liệu.\nKhả năng mở rộng: Redshift hỗ trợ các cụm có phạm vi từ vài trăm gigabyte đến nhiều petabyte dữ liệu, cho phép bạn mở rộng cơ sở hạ tầng kho dữ liệu dựa trên nhu cầu kinh doanh của mình. Bạn có thể dễ dàng thêm hoặc xóa các nút khỏi cụm Redshift mà không có thời gian ngừng hoạt động.\nHiệu suất cao: Redshift được tối ưu hóa để mang lại hiệu suất truy vấn nhanh, với khả năng thực hiện các truy vấn phân tích phức tạp đối với các tập dữ liệu lớn trong vài giây hoặc vài phút. Nó tận dụng các kỹ thuật tối ưu hóa truy vấn nâng cao, chẳng hạn như song song hóa truy vấn, chiến lược phân phối dữ liệu và thu thập thống kê bảng tự động, để mang lại hiệu suất tối ưu.\nTích hợp với Data Lake: Redshift Spectrum cho phép bạn truy vấn dữ liệu được lưu trữ trong Amazon S3 trực tiếp từ cụm Redshift mà không cần tải dữ liệu đó vào bảng Redshift. Điều này cho phép bạn phân tích dữ liệu trên kho dữ liệu và hồ dữ liệu một cách liền mạch, cung cấp chế độ xem thống nhất về dữ liệu của bạn.\nPhân tích nâng cao: Redshift hỗ trợ các khả năng phân tích nâng cao, bao gồm chức năng cửa sổ, chức năng do người dùng xác định (UDF) và tích hợp máy học thông qua Amazon SageMaker. Điều này cho phép bạn thực hiện phân tích dữ liệu phức tạp và lập mô hình dự đoán trực tiếp trong môi trường Redshift của mình.\nBảo mật: Redshift cung cấp các tính năng bảo mật mạnh mẽ, bao gồm mã hóa khi lưu trữ và đang truyền, kiểm soát truy cập chi tiết bằng chính sách AWS Identity and Access Management (IAM) và tích hợp với AWS Key Management Service (KMS) để quản lý mã hóa phím. Nó cũng tuân thủ các tiêu chuẩn và quy định khác nhau của ngành, chẳng hạn như HIPAA, GDPR và PCI DSS.\nSao lưu và bảo trì tự động: Redshift tự động thực hiện các bản sao lưu gia tăng cho dữ liệu của bạn và thực hiện các tác vụ bảo trì như vá phần mềm và thay thế nút, đảm bảo tính khả dụng cao và độ bền dữ liệu mà không cần can thiệp thủ công.\nAmazon DocumentDB (with MongoDB compatibility): Amazon DocumentDB là dịch vụ cơ sở dữ liệu tài liệu tương thích với MongoDB được quản lý toàn phần do Amazon Web Services (AWS) cung cấp. Nó được thiết kế để cung cấp khả năng mở rộng, lưu trữ hiệu suất cao cho dữ liệu JSON, khiến nó rất phù hợp cho các ứng dụng yêu cầu cấu trúc dữ liệu linh hoạt và năng động. Một số tính năng chính của Amazon DocumentDB bao gồm:\nTính năng chính:\nKhả năng tương thích với MongoDB: Amazon DocumentDB tương thích với MongoDB 3.6, nghĩa là bạn có thể sử dụng trình điều khiển, công cụ và ứng dụng MongoDB hiện có với DocumentDB mà không cần sửa đổi mã của mình. Khả năng tương thích này giúp dễ dàng di chuyển khối lượng công việc MongoDB hiện có sang DocumentDB mà không tốn nhiều công sức.\nDịch vụ được quản lý hoàn toàn: DocumentDB là dịch vụ được quản lý toàn phần, nghĩa là AWS xử lý các tác vụ như cung cấp phần cứng, thiết lập, cấu hình, giám sát và sao lưu. Điều này cho phép các nhà phát triển tập trung vào việc xây dựng ứng dụng mà không phải lo lắng về các nhiệm vụ quản lý cơ sở dữ liệu.\nKhả năng mở rộng: DocumentDB được thiết kế để mở rộng quy mô một cách dễ dàng nhằm đáp ứng khối lượng công việc và khối lượng dữ liệu ngày càng tăng. Nó hỗ trợ mở rộng quy mô theo chiều ngang bằng cách tự động thêm các bản sao chỉ có quyền đọc để phân phối lưu lượng đọc và cải thiện hiệu suất. Ngoài ra, DocumentDB có thể tự động mở rộng dung lượng lưu trữ lên tới 64 TB mỗi cụm, loại bỏ nhu cầu quản lý dung lượng thủ công.\nTính sẵn sàng cao: DocumentDB cung cấp tính sẵn sàng cao tích hợp với khả năng sao chép đồng bộ trên nhiều Vùng sẵn sàng (AZ) trong một khu vực. Điều này đảm bảo rằng dữ liệu của bạn có khả năng phục hồi trước các lỗi AZ và vẫn khả dụng với thời gian ngừng hoạt động hoặc mất dữ liệu ở mức tối thiểu.\nHiệu suất: DocumentDB cung cấp hiệu suất nhanh và có thể dự đoán được cho khối lượng công việc đọc nhiều, với thời gian phản hồi có độ trễ thấp khi thực hiện truy vấn. Nó sử dụng bộ lưu trữ dựa trên SSD và xử lý phân tán để mang lại khả năng truy cập dữ liệu thông lượng cao và độ trễ thấp.\nMô hình tài liệu: DocumentDB hỗ trợ mô hình tài liệu linh hoạt dựa trên tài liệu JSON (BSON), cho phép bạn lưu trữ và truy vấn dữ liệu bán cấu trúc với các trường và mảng lồng nhau. Điều này làm cho nó rất phù hợp cho các ứng dụng có lược đồ đang phát triển hoặc cấu trúc dữ liệu động.\nBảo mật: DocumentDB cung cấp các tính năng bảo mật mạnh mẽ, bao gồm mã hóa khi lưu trữ và đang truyền, kiểm soát truy cập chi tiết bằng chính sách AWS Identity and Access Management (IAM) và tích hợp với AWS Key Management Service (KMS) để quản lý mã hóa phím. Nó cũng tuân thủ các tiêu chuẩn và quy định khác nhau của ngành, chẳng hạn như HIPAA, GDPR và PCI DSS.\nSao lưu được quản lý và khôi phục tại thời điểm: DocumentDB tự động sao lưu liên tục dữ liệu của bạn và cho phép bạn khôi phục cơ sở dữ liệu của mình về bất kỳ thời điểm nào trong khoảng thời gian lưu giữ sao lưu. Điều này giúp bảo vệ khỏi mất dữ liệu và cung cấp cơ chế khắc phục thảm họa.\nAmazon Neptune: Amazon Neptune là dịch vụ cơ sở dữ liệu đồ thị được quản lý toàn phần do Amazon Web Services (AWS) cung cấp. Nó được tối ưu hóa để lưu trữ và truy vấn dữ liệu có tính kết nối cao, giúp nó phù hợp với các ứng dụng yêu cầu mô hình hóa và truyền tải mối quan hệ phức tạp, chẳng hạn như mạng xã hội, công cụ đề xuất, phát hiện gian lận và biểu đồ tri thức. Một số tính năng chính của Amazon Neptune bao gồm:\nTính năng chính:\nDịch vụ được quản lý hoàn toàn: Neptune là dịch vụ được quản lý toàn phần, nghĩa là AWS xử lý các nhiệm vụ cung cấp, thiết lập, cấu hình, giám sát, sao lưu và bảo trì cơ sở hạ tầng. Điều này cho phép các nhà phát triển tập trung vào việc xây dựng ứng dụng mà không cần lo lắng về việc quản lý cơ sở dữ liệu.\nCông cụ cơ sở dữ liệu đồ thị: Neptune được xây dựng trên một công cụ cơ sở dữ liệu đồ thị chuyên dụng được tối ưu hóa để lưu trữ và truy vấn dữ liệu có cấu trúc đồ thị. Nó hỗ trợ các mô hình biểu đồ thuộc tính và RDF (Khung mô tả tài nguyên), cho phép bạn biểu diễn dữ liệu dưới dạng nút, cạnh và thuộc tính.\nKhả năng mở rộng cao: Neptune được thiết kế để mở rộng quy mô một cách dễ dàng nhằm đáp ứng khối lượng công việc và khối lượng dữ liệu ngày càng tăng. Nó hỗ trợ mở rộng quy mô theo chiều ngang bằng cách tự động thêm bản sao đọc và dung lượng lưu trữ để xử lý thông lượng truy vấn và kích thước tập dữ liệu ngày càng tăng.\nTính sẵn sàng cao: Neptune cung cấp tính sẵn sàng cao tích hợp với khả năng sao chép đồng bộ trên nhiều Vùng sẵn sàng (AZ) trong một khu vực. Điều này đảm bảo rằng dữ liệu của bạn có khả năng phục hồi trước các lỗi AZ và vẫn khả dụng với thời gian ngừng hoạt động hoặc mất dữ liệu ở mức tối thiểu.\nHiệu suất: Neptune cung cấp hiệu suất nhanh và có thể dự đoán được cho các truy vấn biểu đồ, với thời gian phản hồi có độ trễ thấp để duyệt qua các mối quan hệ và phân tích dữ liệu biểu đồ. Nó tận dụng các kế hoạch thực hiện truy vấn được tối ưu hóa và xử lý phân tán để mang lại khả năng truy cập dữ liệu có thông lượng cao và độ trễ thấp.\nMô hình dữ liệu linh hoạt: Neptune hỗ trợ cả mô hình dữ liệu RDF và biểu đồ thuộc tính, mang lại sự linh hoạt trong việc biểu diễn và truy vấn dữ liệu có cấu trúc biểu đồ. Nó cho phép bạn xác định các loại nút và cạnh tùy chỉnh, thuộc tính và chỉ mục để tối ưu hóa hiệu suất truy vấn.\nTích hợp với Dịch vụ AWS: Neptune tích hợp liền mạch với các dịch vụ AWS khác, chẳng hạn như Amazon S3, AWS Lambda, Amazon CloudWatch và AWS Identity and Access Management (IAM). Điều này cho phép bạn xây dựng các ứng dụng dựa trên biểu đồ toàn diện bằng các công cụ và dịch vụ AWS quen thuộc.\nBảo mật: Neptune cung cấp các tính năng bảo mật mạnh mẽ, bao gồm mã hóa khi lưu trữ và đang truyền, kiểm soát truy cập chi tiết bằng chính sách AWS Identity and Access Management (IAM) và tích hợp với AWS Key Management Service (KMS) để quản lý mã hóa phím. Nó cũng tuân thủ các tiêu chuẩn và quy định khác nhau của ngành, chẳng hạn như HIPAA, GDPR và PCI DSS.\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/2.1.2.-create-vpc-endpoint/",
	"title": "Tạo VPC endpoint",
	"tags": [],
	"description": "",
	"content": "Tổng quan Chúng tôi thấy VPC Endpoint kết nối giữa hàm Lambda và DynamoDB.\nTại sao cần VPC Endpoint để kết nối?\nCách ly VPC: Khi các chức năng Lambda được định cấu hình để chạy trong VPC, chúng sẽ bị cô lập với internet và chỉ có thể truy cập các tài nguyên trong VPC hoặc những tài nguyên có thể truy cập thông qua VPC Endpoint. Điều này đảm bảo mức độ bảo mật cao hơn bằng cách hạn chế quyền truy cập từ bên ngoài. Điểm cuối DynamoDB: DynamoDB là dịch vụ AWS nằm trên cơ sở hạ tầng mạng AWS. Khi được truy cập từ bên trong VPC, các hàm Lambda cần giao tiếp với DynamoDB thông qua giao diện được gọi là VPC Endpoint. VPC Endpoint hoạt động như một cổng cho phép giao tiếp riêng tư giữa các tài nguyên trong các dịch vụ VPC và AWS như DynamoDB mà không cần truy cập internet. Truy cập mạng con riêng tư: Việc đặt cả hai hàm Lambda và DynamoDB trong cùng một mạng con riêng tư sẽ đảm bảo rằng hoạt động giao tiếp giữa chúng vẫn ở chế độ riêng tư và không truyền qua Internet công cộng. Điều này càng nâng cao tính bảo mật của ứng dụng. Bằng cách tạo VPC Endpoint cho DynamoDB trong VPC của bạn, các hàm Lambda trong cùng một VPC có thể giao tiếp an toàn với DynamoDB mà không cần truy cập Internet. Thiết lập này đảm bảo rằng việc truyền dữ liệu giữa Lambda và DynamoDB vẫn an toàn và riêng tư, đồng thời tối ưu hóa hiệu suất mạng bằng cách tránh định tuyến Internet không cần thiết. Tóm lại, mặc dù các hàm Lambda và DynamoDB có thể cùng tồn tại trong cùng một mạng con riêng tư trong VPC, nhưng các hàm Lambda yêu cầu VPC Endpoint để thiết lập kết nối với DynamoDB khi hoạt động trong môi trường VPC. Điều này đảm bảo liên lạc an toàn và riêng tư giữa hai dịch vụ mà không cần truy cập Internet và không phải trả phí cho đường truyền Internet đi từ Mô hình định giá AWS.\nThực hành Hãy Tạo VPC Endpoint làm theo hướng dẫn bên dưới: Truy cập https://us-east-1.console.aws.amazon.com/vpcconsole/home?region=us-east-1#Endpoints: choose Create Endpoint Chọn Tùy chọn bên dưới như hình ảnh:\nName tag – optional: Điền tên endpoint VPC Service category: Dịch vụ AWS Services: com.amazonaws.us-east-1.dynamodb VPC: chọn vpc chúng ta đã tạo ở Step 2.1.1 "
},
{
	"uri": "//localhost:1313/vi/1-introduce-aws/1.4-networkingservices/",
	"title": "Dịch vụ mạng",
	"tags": [],
	"description": "",
	"content": "Giới thiệu dịch vụ mạng Amazon Web Services (AWS) cung cấp một bộ dịch vụ mạng toàn diện được thiết kế để cung cấp kết nối có thể mở rộng, an toàn và đáng tin cậy cho các ứng dụng và tài nguyên dựa trên đám mây. Các dịch vụ mạng này cho phép doanh nghiệp xây dựng, quản lý và tối ưu hóa cơ sở hạ tầng mạng của họ một cách dễ dàng. Dưới đây là phần giới thiệu về một số dịch vụ mạng AWS chính:\nAWS cung cấp một số dịch vụ cơ sở dữ liệu, mỗi dịch vụ phục vụ cho các trường hợp sử dụng và yêu cầu khối lượng công việc khác nhau.\nContents Amazon Virtual Private Cloud (VPC): Amazon Virtual Private Cloud (VPC) có khả năng cung cấp cho người dùng toàn quyền kiểm soát môi trường mạng ảo của họ trong Đám mây AWS\nTính năng chính:\nCách ly: Amazon VPC cho phép người dùng tạo các phần riêng biệt của Đám mây AWS, được gọi là đám mây riêng ảo. Sự cô lập này cung cấp khả năng bảo mật nâng cao bằng cách cho phép người dùng xác định cấu trúc liên kết mạng của riêng họ, định cấu hình dải địa chỉ IP của riêng họ và thực hiện các chính sách kiểm soát truy cập mạng.\nTùy chỉnh: Người dùng có thể linh hoạt tùy chỉnh VPC của mình bằng cách tạo mạng con, xác định bảng lộ trình, định cấu hình cổng mạng (như Cổng Internet, Cổng riêng ảo và Cổng NAT) cũng như thiết lập nhóm bảo mật và kiểm soát truy cập mạng danh sách (ACL) để kiểm soát luồng lưu lượng.\nKhả năng mở rộng: Amazon VPC có khả năng mở rộng cao, cho phép người dùng dễ dàng tăng hoặc giảm quy mô cơ sở hạ tầng mạng của mình dựa trên các yêu cầu thay đổi. Người dùng có thể tự động thêm hoặc xóa tài nguyên trong VPC của mình, chẳng hạn như phiên bản, bộ lưu trữ và thành phần mạng mà không làm gián đoạn hoạt động của họ.\nTích hợp: Amazon VPC tích hợp liền mạch với các dịch vụ AWS khác, cho phép người dùng xây dựng kiến ​​trúc phức tạp và phân tán cho ứng dụng của họ. Người dùng có thể triển khai các tài nguyên AWS như phiên bản Amazon EC2, cơ sở dữ liệu Amazon RDS và bộ lưu trữ Amazon S3 trong VPC của họ, cung cấp cho họ quyền truy cập an toàn và riêng tư vào các tài nguyên này.\nTùy chọn kết nối: Amazon VPC cung cấp nhiều tùy chọn kết nối để kết nối với các mạng và tài nguyên khác. Người dùng có thể thiết lập kết nối riêng giữa VPC và trung tâm dữ liệu tại chỗ bằng kết nối AWS Direct Connect hoặc VPN, cho phép triển khai đám mây lai. Ngoài ra, người dùng có thể kết nối nhiều VPC với nhau bằng cách sử dụng VPC ngang hàng hoặc AWS Transit Gateway, cho phép họ xây dựng các kiến ​​trúc mạng phức tạp và được kết nối với nhau.\nAmazon Route 53: Amazon Route 53, dịch vụ web Hệ thống tên miền (DNS) có khả năng mở rộng của AWS, cung cấp một số tính năng chính giúp dịch vụ này trở thành một thành phần quan trọng để quản lý tên miền và định tuyến lưu lượng truy cập Internet một cách hiệu quả.\nTính năng chính:\nTính sẵn sàng cao và độ tin cậy: Amazon Route 53 được thiết kế để cung cấp tính sẵn sàng và độ tin cậy cao cho các truy vấn DNS. Nó hoạt động trên một mạng lưới máy chủ DNS toàn cầu có tính phân tán cao và dự phòng, giúp đảm bảo độ trễ thấp và thời gian ngừng hoạt động tối thiểu để phân giải DNS.\nĐăng ký tên miền: Route 53 cho phép người dùng đăng ký và quản lý tên miền trực tiếp từ Bảng điều khiển quản lý AWS. Người dùng có thể dễ dàng đăng ký tên miền mới hoặc chuyển tên miền hiện có và quản lý cài đặt đăng ký tên miền như thông tin liên hệ, bảo vệ quyền riêng tư và tự động gia hạn tên miền.\nChính sách định tuyến DNS: Route 53 cung cấp nhiều chính sách định tuyến DNS khác nhau cho phép người dùng kiểm soát cách định tuyến và phân phối các truy vấn DNS. Các chính sách này bao gồm Định tuyến đơn giản, Định tuyến có trọng số, Định tuyến dựa trên độ trễ, Định tuyến chuyển đổi dự phòng, Định tuyến vị trí địa lý và Định tuyến câu trả lời đa giá trị, cho phép người dùng triển khai các chiến lược định tuyến lưu lượng truy cập phức tạp dựa trên các yếu tố như vị trí địa lý, độ trễ, kiểm tra tình trạng, v.v. .\nKiểm tra tình trạng và chuyển đổi dự phòng: Route 53 cung cấp khả năng kiểm tra tình trạng tích hợp cho phép người dùng theo dõi tình trạng và tính khả dụng của tài nguyên của họ, chẳng hạn như máy chủ web hoặc bộ cân bằng tải. Người dùng có thể định cấu hình kiểm tra tình trạng để kiểm tra định kỳ trạng thái tài nguyên của họ và tự động định tuyến lưu lượng truy cập từ các điểm cuối không tốt hoặc không khả dụng đến các điểm cuối tốt bằng cách sử dụng Chuyển đổi dự phòng DNS.\nTích hợp với Dịch vụ AWS: Route 53 tích hợp liền mạch với các dịch vụ AWS khác, giúp dễ dàng quản lý bản ghi DNS cho tài nguyên AWS. Người dùng có thể tự động tạo bản ghi DNS cho các tài nguyên như phiên bản Amazon EC2, Bộ cân bằng tải đàn hồi, bộ chứa Amazon S3 và bản phân phối CloudFront, đơn giản hóa quy trình định cấu hình DNS cho các ứng dụng và dịch vụ dựa trên đám mây.\nHiển thị luồng giao thông: Tuyến 53 cung cấp tính năng Luồng giao thông trực quan cho phép người dùng tạo và quản lý các cấu hình định tuyến giao thông phức tạp bằng giao diện đồ họa. Người dùng có thể dễ dàng hình dung lưu lượng truy cập chảy qua cơ sở hạ tầng của họ như thế nào và thực hiện các thay đổi đối với chính sách định tuyến trong thời gian thực, giúp họ tối ưu hóa hiệu suất, độ tin cậy và hiệu quả chi phí.\nAWS Direct Connect Một trong những tính năng chính của AWS Direct Connect là khả năng thiết lập các kết nối mạng riêng, chuyên dụng giữa trung tâm dữ liệu tại chỗ, văn phòng hoặc môi trường colocation của tổ chức và cơ sở hạ tầng của AWS.\nTính năng chính:\nKết nối riêng tư: AWS Direct Connect cung cấp kết nối riêng tư tới các dịch vụ đám mây của AWS, bỏ qua Internet công cộng. Điều này đảm bảo trải nghiệm mạng nhất quán và có thể dự đoán được với độ trễ thấp hơn, thông lượng cao hơn và bảo mật được cải thiện so với các kết nối dựa trên internet.\nKết nối chuyên dụng: Người dùng có thể thiết lập kết nối 1 Gbps hoặc 10 Gbps chuyên dụng giữa mạng của họ và các vị trí AWS Direct Connect, cung cấp kết nối băng thông cao và đáng tin cậy cho khối lượng công việc và ứng dụng của họ.\nTùy chọn băng thông linh hoạt: AWS Direct Connect cung cấp các tùy chọn băng thông linh hoạt để đáp ứng nhu cầu khác nhau của các tổ chức khác nhau. Người dùng có thể chọn từ nhiều mức băng thông, từ 50 Mbps đến 100 Gbps và có thể dễ dàng tăng hoặc giảm dung lượng băng thông nếu cần.\nGiảm chi phí mạng: Bằng cách tận dụng AWS Direct Connect, các tổ chức có thể giảm chi phí mạng bằng cách tránh phí truyền dữ liệu liên quan đến kết nối dựa trên internet và bằng cách tối ưu hóa cơ sở hạ tầng mạng để truyền dữ liệu hiệu quả đến và từ các dịch vụ đám mây của AWS.\nBảo mật được cải thiện: AWS Direct Connect giúp cải thiện tính bảo mật khi truyền dữ liệu giữa mạng của tổ chức và cơ sở hạ tầng của AWS bằng cách cung cấp các kết nối mạng riêng và chuyên dụng. Người dùng có thể thực hiện các biện pháp bảo mật bổ sung, chẳng hạn như chính sách mã hóa và kiểm soát truy cập, để tăng cường hơn nữa tính bảo mật cho dữ liệu của họ.\nKết nối đám mây lai: AWS Direct Connect hỗ trợ kết nối đám mây lai bằng cách cho phép các tổ chức tích hợp liền mạch cơ sở hạ tầng tại chỗ của họ với các dịch vụ đám mây của AWS. Điều này cho phép các tổ chức mở rộng khoản đầu tư vào trung tâm dữ liệu hiện có của họ, di chuyển khối lượng công việc lên đám mây và xây dựng kiến ​​trúc đám mây lai nhằm tận dụng lợi ích của cả môi trường tại chỗ và đám mây.\nPhạm vi tiếp cận toàn cầu: AWS Direct Connect có sẵn ở nhiều khu vực trên thế giới, với các địa điểm Direct Connect nằm ở các thành phố và trung tâm dữ liệu lớn. Phạm vi tiếp cận toàn cầu này cho phép các tổ chức thiết lập kết nối riêng với cơ sở hạ tầng của AWS từ hầu hết mọi nơi, khiến nó phù hợp cho việc triển khai đa quốc gia và các doanh nghiệp toàn cầu.\nAmazon CloudFront Dịch vụ Mạng phân phối nội dung (CDN): Amazon CloudFront là dịch vụ CDN lưu trữ nội dung vào bộ nhớ đệm tại các vị trí biên được phân bổ trên toàn thế giới. Bằng cách lưu nội dung vào bộ nhớ đệm gần hơn với người dùng cuối, CloudFront giảm độ trễ và cải thiện hiệu suất của ứng dụng web, API, video và nội dung khác. Tính năng chính:\nMạng lưới vị trí biên toàn cầu: CloudFront hoạt động trên mạng lưới toàn cầu gồm các vị trí biên, có vị trí chiến lược tại các thành phố và khu vực lớn trên toàn thế giới. Các vị trí biên này đóng vai trò là điểm cuối bộ nhớ đệm, nơi nội dung được lưu trữ và phân phối tới người dùng, cho phép CloudFront cung cấp quyền truy cập vào nội dung có độ trễ thấp bất kể vị trí địa lý của người dùng.\nTính sẵn sàng và độ tin cậy cao: CloudFront được thiết kế để cung cấp tính sẵn sàng và độ tin cậy cao cho việc phân phối nội dung. Nó tự động định tuyến các yêu cầu của người dùng đến vị trí biên có sẵn gần nhất với độ trễ thấp nhất, đảm bảo cung cấp nội dung nhanh chóng và đáng tin cậy cho người dùng cuối.\nKhả năng mở rộng: CloudFront có khả năng mở rộng cao và có thể xử lý các đợt tăng đột biến về lưu lượng truy cập cũng như những biến động về nhu cầu mà không cần bất kỳ cấu hình hay cung cấp bổ sung nào. Nó linh hoạt điều chỉnh quy mô tài nguyên dựa trên nhu cầu, cho phép người dùng phân phối nội dung tới hàng triệu người dùng đồng thời một cách dễ dàng.\nTính năng bảo mật: CloudFront cung cấp nhiều tính năng bảo mật để giúp bảo vệ nội dung và ứng dụng khỏi các mối đe dọa bảo mật phổ biến. Các tính năng này bao gồm hỗ trợ mã hóa HTTPS, quản lý chứng chỉ SSL/TLS, kiểm soát truy cập bằng cách sử dụng URL và cookie đã ký, danh sách trắng và danh sách đen IP cũng như tích hợp với Tường lửa ứng dụng web AWS (WAF) để tăng cường bảo mật.\nTích hợp với Dịch vụ AWS: CloudFront tích hợp liền mạch với các dịch vụ AWS khác, giúp dễ dàng phân phối nội dung được lưu trữ trong bộ chứa Amazon S3, phiên bản Amazon EC2, hàm AWS Lambda và các máy chủ gốc khác. Người dùng có thể định cấu hình các bản phân phối CloudFront để lưu vào bộ nhớ đệm và phân phối nội dung từ nhiều nguồn, cho phép họ xây dựng các ứng dụng có tính linh hoạt cao và có khả năng mở rộng.\nGiám sát và đo lường theo thời gian thực: CloudFront cung cấp khả năng giám sát và đo lường theo thời gian thực cho phép người dùng giám sát hiệu suất và việc sử dụng các bản phân phối của họ. Người dùng có thể theo dõi các số liệu chính như số lượng yêu cầu, truyền dữ liệu, tỷ lệ nhấn bộ đệm và tỷ lệ lỗi bằng cách sử dụng các công cụ giám sát tích hợp của CloudFront hoặc bằng cách tích hợp với AWS CloudWatch để theo dõi và cảnh báo nâng cao.\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/2.1.3.-develop-lambda-function-with-java-language/",
	"title": "Phát triển hàm Lambda bằng ngôn ngữ Java",
	"tags": [],
	"description": "",
	"content": "Cấu trúc dự án ├── note-app-serverless\r│ ├── aws-resource\r│ │ ├── api-gw\r│ │ │ ├── api-config.json\r│ │ │ ├── api-output.json\r│ │ │ ├── api-resouce-out-put.json\r│ │ │ ├── instructions.md\r│ │ │ ├── Note Resources APP API-dev-oas30 (1).json\r│ │ │ └── Note Resources APP API-dev-oas30-postman (1).json\r│ │ ├── code-deploy\r│ │ │ └── pipeline.yaml\r│ │ └── lambda\r│ │ ├── LambdaAddDataFunction.yaml\r│ │ ├── LambdaDeleteNote.yaml\r│ │ └── LambdaFetchDataFunction.yaml\r│ └── aws-serverless-note-app\r│ ├── mvnw\r│ ├── mvnw.cmd\r│ ├── pom.xml\r│ ├── res.txt\r│ ├── src\r│ │ ├── main\r│ │ │ ├── java\r│ │ │ │ └── org\r│ │ │ │ └── example\r│ │ │ │ └── awsserverlessnoteapp\r│ │ │ │ ├── ApplicationMain.java\r│ │ │ │ ├── enviromentVariable.sh\r│ │ │ │ ├── LambdaAddDataFunction.java\r│ │ │ │ ├── LambdaDeleteDataFunction.java\r│ │ │ │ ├── LambdaFetchDataFunction.java\r│ │ │ │ └── LambdaUpdateDataFunction.java\r│ │ │ └── resources\r│ │ │ └── application.properties\r│ │ └── test\r│ │ └── java\r│ │ └── org\r│ │ └── example\r│ │ └── awsserverlessnoteapp\r│ │ └── AwsServerlessNoteAppApplicationTests.java\r│ └── target\r│ ├── aws-serverless-note-app-0.0.1-SNAPSHOT.jar\r│ ├── classes\r│ │ ├── application.properties\r│ │ └── org\r│ │ └── example\r│ │ └── awsserverlessnoteapp\r│ │ ├── ApplicationMain.class\r│ │ ├── LambdaAddDataFunction.class\r│ │ ├── LambdaDeleteDataFunction.class\r│ │ ├── LambdaFetchDataFunction.class\r│ │ └── LambdaUpdateDataFunction.class\r│ ├── generated-sources\r│ │ └── annotations\r│ ├── generated-test-sources\r│ │ └── test-annotations\r│ ├── maven-archiver\r│ │ └── pom.properties\r│ ├── maven-status\r│ │ └── maven-compiler-plugin\r│ │ ├── compile\r│ │ │ └── default-compile\r│ │ │ ├── createdFiles.lst\r│ │ │ └── inputFiles.lst\r│ │ └── testCompile\r│ │ └── default-testCompile\r│ │ ├── createdFiles.lst\r│ │ └── inputFiles.lst\r│ ├── original-aws-serverless-note-app-0.0.1-SNAPSHOT.jar\r│ └── test-classes\r└── README.md\rTham khảo Kho lưu trữ Gihub của tôi và Hãy kiểm tra mã nguồn để hiểu cách tạo các hàm Lambda bằng Java.\nGit Url: https://github.com/daotq2000/aws-handson\nDưới đây là bảng phân tích các thư mục và tệp có liên quan:\nnote-app-serverless:\nĐây dường như là thư mục gốc của dự án của bạn. Trong thư mục này có hai thư mục con chính: aws-resource và aws-serverless-note-app. aws-resource:\nThư mục này chứa các tài nguyên liên quan đến việc thiết lập cơ sở hạ tầng AWS của bạn. Bên trong aws-resource, có các thư mục con như api-gw, code-deploy và lambda.api-gw có thể chứa các cấu hình và định nghĩa liên quan đến API Gateway.code-deploy dường như chứa tệp định nghĩa quy trình cho AWS CodeDeploy.lambda có thể chứa cấu hình hoặc định nghĩa cho hàm Lambda của bạn. aws-serverless-note-app:\nThư mục này dường như chứa mã nguồn cho ứng dụng ghi chú serverless của bạn. Bên trong aws-serverless-note-app có các thư mục như src và target, điển hình của cấu trúc dự án Maven. Thư mục src chứa mã nguồn Java của bạn được sắp xếp hợp lý vào thư mục chính và kiểm tra. Thư mục chính chứa mã Java chính của ứng dụng, bao gồm các lớp như ApplicationMain.java, LambdaAddDataFunction.java, LambdaDeleteDataFunction.java, v.v. Thư mục tài nguyên có thể chứa các tệp cấu hình ứng dụng, chẳng hạn như application.properties.\nThực hành Hãy bắt đầu với pom.xml Chúng ta cần 2 dependency để phát triển core cho lambda với Java Spring Boot Project\nPom.xml\n\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.amazonaws\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;aws-java-sdk-dynamodb\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.12.670\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;!-- https://mvnrepository.com/artifact/com.amazonaws/aws-lambda-java-core --\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.amazonaws\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;aws-lambda-java-core\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.2.3\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\rTiếp theo, chúng ta phải thêm hàm lambda biên dịch plugin vào tệp Pom.xml\n\u0026lt;plugins\u0026gt;\r\u0026lt;plugin\u0026gt;\r\u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;maven-shade-plugin\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;3.5.2\u0026lt;/version\u0026gt;\r\u0026lt;configuration\u0026gt;\r\u0026lt;createDependencyReducedPom\u0026gt;false\u0026lt;/createDependencyReducedPom\u0026gt;\r\u0026lt;/configuration\u0026gt;\r\u0026lt;executions\u0026gt;\r\u0026lt;execution\u0026gt;\r\u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt;\r\u0026lt;goals\u0026gt;\r\u0026lt;goal\u0026gt;shade\u0026lt;/goal\u0026gt;\r\u0026lt;/goals\u0026gt;\r\u0026lt;/execution\u0026gt;\r\u0026lt;/executions\u0026gt;\r\u0026lt;/plugin\u0026gt;\r\u0026lt;/plugins\u0026gt;\rĐây là tệp phiên bản đầy đủ https://github.com/daotq2000/aws-handson/blob/main/note-app-serverless/aws-serverless-note-app/pom.xml\nLưu ý: Chúng ta cần tạo 3 chức năng: Thêm, Cập nhật dữ liệu và Tìm nạp dữ liệu và xóa dữ liệu. Chúng ta phải viết mã theo forder: note-app-serverless/aws-serverless-note-app/src/main/java/org/example/awsserverlessnoteapp\nĐầu tiên, hãy tạo Hàm LambdaAddDataFunction trên tệp LambdaAddDataFunction.java Path: note-app-serverless/aws-serverless-note-app/src/main/java/org/example/awsserverlessnoteapp/LambdaAddDataFunction.java\npackage org.example.awsserverlessnoteapp;\rimport com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;\rimport com.amazonaws.services.dynamodbv2.model.AttributeValue;\rimport com.amazonaws.services.dynamodbv2.model.PutItemRequest;\rimport com.amazonaws.services.lambda.runtime.Context;\rimport com.amazonaws.services.lambda.runtime.RequestHandler;\rimport java.util.HashMap;\rimport java.util.Map;\rpublic class LambdaAddDataFunction implements RequestHandler\u0026lt;Map\u0026lt;String,String\u0026gt;,String\u0026gt; {\rprivate static final String TABLE_NAME = System.getenv(\u0026quot;AWS_DYNAMO_TABLE_NAME_VALUE\u0026quot;);\rprivate AmazonDynamoDBClient ddb;\rpublic LambdaAddDataFunction() {\rddb = (AmazonDynamoDBClient) AmazonDynamoDBClient.builder().withRegion(System.getenv(\u0026quot;AWS_REGION_VALUE\u0026quot;)).build();\r}\r@Override\rpublic String handleRequest(Map\u0026lt;String, String\u0026gt; itemValues, Context context) {\rMap\u0026lt;String, AttributeValue\u0026gt; item = new HashMap\u0026lt;\u0026gt;();\ritemValues.forEach((k, v) -\u0026gt; item.put(k, new AttributeValue().withS(v.toString())));\rPutItemRequest request = new PutItemRequest();\rrequest.setTableName(TABLE_NAME);\rrequest.setItem(item);\rddb.putItem(request);\rreturn item.toString();\r}\r}\rGiải thích: Do Thông tin của Bảng DynamoDB, các Khu vực có thể thay đổi trong RunTime, nên chúng ta cần đưa nó ra môi trường bằng cách sử dụng System.getenv(“AWS_REGION_VALUE”) và System.getenv(“AWS_DYNAMO_TABLE_NAME_VALUE ”) để lấy các biến môi trường khi chạy.\nprivate static final String TABLE_NAME = System.getenv(\u0026quot;AWS_DYNAMO_TABLE_NAME_VALUE\u0026quot;);\rpublic LambdaAddDataFunction() {\rddb = (AmazonDynamoDBClient) AmazonDynamoDBClient.builder().withRegion(System.getenv(\u0026quot;AWS_REGION_VALUE\u0026quot;)).build();\r}\rThứ hai, hãy tạo Hàm LambdaDeleteDataFunction trên tệp LambdaDeleteDataFunction.java Đường dẫn: note-app-serverless/aws-serverless-note-app/src/main/java/org/example/awsserverlessnoteapp/LambdaDeleteDataFunction.java\npackage org.example.awsserverlessnoteapp;\rimport com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;\rimport com.amazonaws.services.dynamodbv2.model.AttributeValue;\rimport com.amazonaws.services.dynamodbv2.model.DeleteItemRequest;\rimport com.amazonaws.services.lambda.runtime.Context;\rimport com.amazonaws.services.lambda.runtime.RequestHandler;\rimport java.util.HashMap;\rimport java.util.Map;\rpublic class LambdaDeleteDataFunction implements RequestHandler\u0026lt;Map\u0026lt;String,String\u0026gt;,String\u0026gt; {\rprivate static final String TABLE_NAME = System.getenv(\u0026quot;AWS_DYNAMO_TABLE_NAME_VALUE\u0026quot;);\rprivate AmazonDynamoDBClient ddb;\rpublic LambdaDeleteDataFunction() {\rddb = (AmazonDynamoDBClient) AmazonDynamoDBClient.builder().withRegion(System.getenv(\u0026quot;AWS_REGION_VALUE\u0026quot;)).build();\r}\r@Override\rpublic String handleRequest(Map\u0026lt;String, String\u0026gt; itemValues, Context context) {\rMap\u0026lt;String, AttributeValue\u0026gt; key = new HashMap\u0026lt;\u0026gt;();\rkey.put(\u0026quot;id\u0026quot;, new AttributeValue().withS(itemValues.get(\u0026quot;id\u0026quot;)));\rDeleteItemRequest request = new DeleteItemRequest()\r.withTableName(TABLE_NAME)\r.withKey(key);\rddb.deleteItem(request);\rreturn \u0026quot;Delete successfully\u0026quot;;\r}\r}\rThứ ba, hãy tạo Hàm LambdaFetchDataFunction trên tệp LambdaFetchDataFunction.java Đường dẫn: note-app-serverless/aws-serverless-note-app/src/main/java/org/example/awsserverlessnoteapp/LambdaFetchDataFunction.java\npackage org.example.awsserverlessnoteapp;\rimport com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;\rimport com.amazonaws.services.dynamodbv2.model.*;\rimport com.amazonaws.services.lambda.runtime.Context;\rimport com.amazonaws.services.lambda.runtime.RequestHandler;\rimport java.util.ArrayList;\rimport java.util.HashMap;\rimport java.util.List;\rimport java.util.Map;\rpublic class LambdaFetchDataFunction implements RequestHandler\u0026lt;Map\u0026lt;String,String\u0026gt;, List\u0026lt;Map\u0026lt;String, String\u0026gt;\u0026gt;\u0026gt; {\rprivate static final String TABLE_NAME = System.getenv(\u0026quot;AWS_DYNAMO_TABLE_NAME_VALUE\u0026quot;);\rprivate AmazonDynamoDBClient ddb;\rpublic LambdaFetchDataFunction() {\rddb = (AmazonDynamoDBClient) AmazonDynamoDBClient.builder().withRegion(System.getenv(\u0026quot;AWS_REGION_VALUE\u0026quot;)).build();\r}\r@Override\rpublic List\u0026lt;Map\u0026lt;String,String\u0026gt;\u0026gt; handleRequest(Map\u0026lt;String, String\u0026gt; itemValues, Context context) {\rScanRequest request = new ScanRequest()\r.withTableName(TABLE_NAME);\rScanResult response = ddb.scan(request);\rList\u0026lt;Map\u0026lt;String, String\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;();\rfor (Map\u0026lt;String, AttributeValue\u0026gt; item : response.getItems()) {\rMap\u0026lt;String, String\u0026gt; newItem = new HashMap\u0026lt;\u0026gt;();\rfor (Map.Entry\u0026lt;String, AttributeValue\u0026gt; entry : item.entrySet()) {\rnewItem.put(entry.getKey(), entry.getValue().getS());\r}\rresult.add(newItem);\r}\rreturn result;\r}\r}\rSau khi hoàn tất, chúng ta có thể xây dựng dự án bằng lệnh Maven\ncd note-app-serverless/aws-serverless-note-app \u0026amp;\u0026amp; mvn clean package\rNếu bạn không có Maven,\ncác bạn có thể tải về tại Trang chủ https://maven.apache.org/install.html Cài đặt maven bằng ubuntu: sudo apt install maven Nếu bạn nhận được phản hồi bên dưới, bạn đã biên dịch thành công project này\nINFO] Replacing original artifact with shaded artifact.\r[INFO] Replacing /home/ubuntu-server/Documents/git/github/aws-handson/note-app-serverless/aws-serverless-note-app/target/aws-serverless-note-app-0.0.1-SNAPSHOT.jar with /home/ubuntu-server/Documents/git/github/aws-handson/note-app-serverless/aws-serverless-note-app/target/aws-serverless-note-app-0.0.1-SNAPSHOT-shaded.jar\r[INFO] ------------------------------------------------------------------------\r[INFO] BUILD SUCCESS\r[INFO] ------------------------------------------------------------------------\r[INFO] Total time: 4.656 s\r[INFO] Finished at: 2024-03-05T00:46:40+07:00\r[INFO] ------------------------------------------------------------------------ "
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/2.1.4.-create-lambda-function-and-deploy/",
	"title": "Tạo hàm Lambda và triển khai",
	"tags": [],
	"description": "",
	"content": "Tạo hàm Lambda Dưới đây là các bước để tạo hàm Lambda bằng Bảng điều khiển quản lý AWS:\nTruy cập https://us-east-1.console.aws.amazon.com/lambda/home?region=us-east-1#/functions and choose Create function Fill yours function infomation:\nChọn: Author from scratch Function name: điền tên hàm của bạn. ví dụ: LambdaFetchDataFunction Runtime: Java11 Architecture: arm64 Advanced settings: Chọn Bật VPC VPC: Chọn VPC chúng ta đã tạo ở bước 1 Subnets: Chọn private-subnet Security groups: khuyến nghị mặc định Sau khi thực hiện xong chọn Tạo hàm, Tương tự, chúng ta tiếp tục tạo 3 hàm như hình bên dưới theo thứ tự: LambdaFetchDataFunction, LambdaDeleteDataFunction, LambdaFetchDataFunction\nChi Tiết Cấu Hình Cho Từng Function Sau khi làm xong, chúng ta có 3 hàm, bây giờ hãy nhấp vào LambdaFetchDataFunction Để chức năng hoạt động, chúng ta cần tải mã lên lambda, nhấp vào Upload từ tại tab Code.. Chúng ta có 2 lựa chọn:\nUpload trực tiếp file .jar, là chúng tôi đã build gói mvn clean ở bước 3 Tải lên qua bảng điều khiển S3 và nhận URI công khai rồi điền vào đó Tiếp theo, chúng ta phải cấu hình môi trường thời gian chạy để lambda có thể thực thi đúng chức năng, Nhấp vào Edit Dán : org.example.awsserverlessnoteapp.LambdaFetchDataFunction::handleRequest\nBây giờ, hãy kiểm tra mã nguồn của chúng tôi. Chúng tôi có một Class tên LambdaFetchDataFunction, Lớp LambdaFetchDataFunction trong package: org.example.awsserverlessnoteapp. Lớp LambdaFetchDataFunction có hàm handRequest, thực thi tìm nạp dữ liệu từ DynamoDB Tiếp theo chúng ta sẽ nhấp vào tab Cấu hình, nhấp vào Biến môi trường, chúng ta có thể định cấu hình nhiều giá trị tại đây.\nGeneral configuration Triggers Permissions Destinations Function URL Environment variables Tags VPC Monitoring and operations tools Concurrency Asynchronous invocation Code signing RDS databases File systems State machines Hãy nhấp vào Chỉnh sửa và thêm 2 biến môi trường vào đó.\nKey: AWS_DYNAMO_TABLE_NAME_VALUE, Value: note_tbl\rKey: AWS_REGION_VALUE, Value: us-east-1\rTương tự thiết lập hàm lambda LambdaAddDataFunction,LambdaDeleteDataFunction theo hướng dẫn ở trên.\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/2.1.5.-create-dynamodb/",
	"title": "Tạo DynamoDB Database",
	"tags": [],
	"description": "",
	"content": "Tạo DynamoDB Database Bây giờ, chúng ta đã gần như hoàn thành việc thiết lập hàm lambda, bước tiếp theo chúng ta cần nguồn dữ liệu để hàm lambda có thể hoạt động và hoạt động chính xác theo sau.\nĐăng nhập vào Bảng điều khiển quản lý AWS: Truy cập https://console.aws.amazon.com/ và đăng nhập vào tài khoản AWS của bạn. Mở Bảng điều khiển DynamoDB: Sau khi bạn đăng nhập, hãy điều hướng đến dịch vụ DynamoDB bằng cách nhập “DynamoDB” vào thanh tìm kiếm hoặc bằng cách định vị nó trong phần “Cơ sở dữ liệu” trong menu dịch vụ. Tạo Table: note_tbl (Bảng này chúng ta đã config ở biến môi trường) Bấm vào nút “Tạo bảng”. Bạn sẽ được nhắc nhập thông tin chi tiết cho bảng mới của mình: Tên bảng: Khóa chính: Xác định khóa chính cho bảng của bạn. Điều này bao gồm khóa phân vùng và tùy chọn khóa sắp xếp. DynamoDB sử dụng khóa chính để xác định duy nhất từng mục trong bảng. Dung lượng được cung cấp so với dung lượng theo yêu cầu: Chọn xem bạn muốn cung cấp dung lượng theo cách thủ công hay sử dụng dung lượng theo yêu cầu. Nếu chọn dung lượng được cung cấp, bạn sẽ cần chỉ định đơn vị dung lượng đọc và ghi. Nếu bạn chọn dung lượng theo yêu cầu, DynamoDB sẽ tự động điều chỉnh dung lượng đọc và ghi dựa trên khối lượng công việc của bạn. Khi bạn đã nhập tất cả các chi tiết cần thiết, hãy nhấp vào “Tạo”. Sau khi tạo bảng, chúng ta đã thiết lập thành công dynamodb, bước tiếp theo chúng ta cần tạo REST API bằng API Gateway để thực thi hàm lambda và tương tác với Dynamo DB\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/2.1.7.-development-frontend/",
	"title": "Phát triển giao diện người dùng",
	"tags": [],
	"description": "",
	"content": "Demo Sau khi hoàn thành front-end chúng ta có một website tương tự như hình trên, các bạn có thể tạo, chỉnh sửa, xóa ghi chú.\nTrang web Url công khai: https://daotq2000.github.io/note-app/\nKho lưu trữ Github: https://github.com/daotq2000/note-app.git\nThực hành Hãy kiểm tra mã nguồn cấu trúc\n├── chỉ mục.css\r├── chỉ mục.html\r├──index.js\r└── README.md\rChúng ta cần tạo 3 tập tin:\nindex.html: xác định cấu trúc cho website, các phần tử HTML index.js: chứa script có JavaScript để Fetch HTTP request và tương tác với API. index.css: dùng để xác định màu sắc, định dạng cho HTML Elmement. File index.html\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot; /\u0026gt;\r\u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;IE=edge\u0026quot; /\u0026gt;\r\u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot; /\u0026gt;\r\u0026lt;title\u0026gt;notes taking app\u0026lt;/title\u0026gt;\r\u0026lt;link href=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot; \u0026gt;\r\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;index.css\u0026quot; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1 style=\u0026quot;text-align: center;color: white;\u0026quot;\u0026gt;AWS handson labs for serverless application make by TRAN QUANG DAO\u0026lt;/h1\u0026gt;\r\u0026lt;div class=\u0026quot;popup-box\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;popup\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;content\u0026quot;\u0026gt;\r\u0026lt;header\u0026gt;\r\u0026lt;p\u0026gt;Add a new note\u0026lt;/p\u0026gt;\r\u0026lt;i class=\u0026quot;fa fa-times\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\r\u0026lt;/header\u0026gt;\r\u0026lt;form action=\u0026quot;#\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;row title\u0026quot;\u0026gt;\r\u0026lt;label for=\u0026quot;\u0026quot;\u0026gt;Title\u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;title\u0026quot;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026quot;row description\u0026quot;\u0026gt;\r\u0026lt;label for=\u0026quot;\u0026quot;\u0026gt;Description\u0026lt;/label\u0026gt;\r\u0026lt;textarea id=\u0026quot;description\u0026quot;\u0026gt;\u0026lt;/textarea\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;button\u0026gt; Save Note\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt;\r\u0026lt;li class=\u0026quot;add-box\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;icon\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fa-solid fa-plus\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;p\u0026gt;Add new note\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;!-- \u0026lt;li class=\u0026quot;note\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;details\u0026quot;\u0026gt;\r\u0026lt;p\u0026gt;this is title\u0026lt;/p\u0026gt;\r\u0026lt;span\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio, nobis!lorem10\rLorem ipsum dolor sit amet Lorem ipsum dolor .\r\u0026lt;/span\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026quot;bottom-content\u0026quot;\u0026gt;\r\u0026lt;span\u0026gt;9 Sep 2022\u0026lt;/span\u0026gt;\r\u0026lt;div class=\u0026quot;settings show\u0026quot;\u0026gt;\r\u0026lt;i class=\u0026quot;fa-solid fa-ellipsis hide\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\r\u0026lt;ul class=\u0026quot;menu\u0026quot;\u0026gt;\r\u0026lt;li\u0026gt;\u0026lt;i class=\u0026quot;fa-light fa-pen\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;Edit\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;\u0026lt;i class=\u0026quot;fa-duotone fa-trash\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;Delete\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt; --\u0026gt;\r\u0026lt;/div\u0026gt;\rFile index.css\n@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600;900\u0026amp;display=swap');\r*{\rbox-sizing: border-box;\rmargin: 0;\rpadding: 0;\r}\rbody{\rfont-family: 'Poppins', sans-serif;\rbackground-color: #88abff;\r}\r.wrapper{\rmargin: 50px;\rdisplay: grid;\rgrid-template-columns: repeat(auto-fill , 265px);\rgap: 15px;\r}\r.wrapper li{\rbackground-color: #fff;\rlist-style: none;\rheight: 250px;\rborder-radius: 5px;\rpadding: 15px 20px 20px;\r}\r.wrapper .note{\rdisplay: flex;\rflex-direction: column;\rjustify-content: space-between;\r}\r.add-box , .icon , .bottom-content {\rdisplay: flex;\rjustify-content: center;\ralign-items: center; flex-direction: column;\r}\r.add-box .icon{\rheight: 78px;\rwidth: 78px;\rborder-radius: 50%;\rborder: 2px dashed powderblue;\rfont-size: 40px;\rcolor: #88abff;\rcursor: pointer;\r}\r.add-box p{\rfont-weight: 500;\rmargin-top: 20px;\rcolor: #88abff;\r}\r.note p{\rfont-size: 22px;\rfont-weight: 500;\r}\r.note span{\rdisplay: block;\rfont-size: 16px;\rcolor: #575757;\rmargin-top: 5px;\r}\r.note .bottom-content{\rflex-direction: row;\rjustify-content: space-between;\rpadding-top: 10px;\rborder-top: 1px solid #ccc;\r}\r.bottom-content span{\rcolor: #6d6d6d;\rfont-size: 14px;\r}\r.bottom-content .settings i{\rcursor: pointer;\rfont-size: 15px;\rcolor: #6d6d6d;\r}\r.settings{\rposition: relative;\r}\r.settings .menu {\rbox-shadow: 0 0 6px rgba(0,0,0,0.15);\rposition:absolute;\rbottom:0;\rpadding: 5px 0;\rborder-radius: 4px;\rbackground-color: #fff;\rright: -4px;\rtransform:scale(0);\rtransform-origin: bottom right;\rtransition: transform 0.2s ease;\r}\r.settings.show .menu{\rtransform: scale(1);\r}\r.settings .menu li{\rheight: 25px;\rborder-radius: 0;\rdisplay: flex;\ralign-items: center;\rjustify-content: flex-start;\rcursor: pointer;\rfont-size: 16px;\rpadding: 17px 15px;\r}\r.menu li i{\rpadding-right: 8px;\r}\r.menu li:hover{\rbackground-color: #f5f5f5;\r}\r.popup-box{\rposition: fixed;\rtop: 0;\rleft: 0;\rwidth: 100%;\rheight: 100%;\rbackground-color: rgba(0,0,0,0.4);\r}\r.popup-box .popup{\rposition: absolute;\rtop: 50%;\rleft: 50%;\rtransform: translate(-50% ,-50%);\rz-index: 2;\rmax-width: 400px;\rwidth: 100%;\r}\r.popup .content{\rbackground-color: #fff;\rborder-radius: 5px;\r}\r.popup .content header{\rborder-bottom: 1px solid #ccc;\rdisplay: flex;\rjustify-content: space-between;\rpadding: 15px 25px;\r}\r.popup .content header p{\rfont-weight: 500;\rfont-size: 20px;\r}\r.popup .content header i{\rfont-size: 23px;\rcursor: pointer;\rcolor: #8b8989;\r}\r.content form{\rmargin: 15px 25px 35px;\r}\r.content form :where(input , textarea){\rwidth: 100%;\rheight: 50px;\routline:none;\rfont-size: 17px;\rborder-radius: 4px;\rborder: 1px solid #999;\rpadding: 0 15px;\r}\rform .row label{\rmargin-bottom: 6px;\rfont-size: 18px;\rdisplay: block;\r}\r.content form textarea{\rheight: 150px;\rresize: none;\rpadding: 8px 15px;;\r}\r.content form button{\rbackground-color: #6a93f8;\rheight: 50px;\rwidth: 100%;\rmargin: 15px 0;\rborder: none;\rfont-size: 17px;\rcursor: pointer;\rborder-radius: 4px;\rcolor: #fff;\r}\r.popup-box , .popup-box.popup{\ropacity: 0;\rpointer-events: none;\rtransition: all 0.25s ease;\r}\r.popup-box.show {\ropacity: 1;\rpointer-events:auto;\r}\r.hide-icon{\rdisplay: none;\r}\rFile index.js\nLưu ý: Hãy thay thế điểm cuối API của bạn bằng các biến trong tệp index.js và thay thế Url gọi của bạn\nconst BACK_END_URI = “https://q3q8l57ui9.execute-api.us-east-1.amazonaws.com/dev“;\nconst BACK_END_URI = “url của bạn”;\nconst BACK_END_URI = \u0026quot;https://q3q8l57ui9.execute-api.us-east-1.amazonaws.com/dev\u0026quot;;\rconst COMMON_NOTE_URI = `${BACK_END_URI}` + \u0026quot;/notes\u0026quot;\rconst addBox = document.querySelector(\u0026quot;.add-box\u0026quot;)\rconst popupBox = document.querySelector(\u0026quot;.popup-box\u0026quot;)\rconst months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\rconst closeBox = popupBox.querySelector(\u0026quot;header i\u0026quot;)\rconst titleTag = popupBox.querySelector(\u0026quot;input\u0026quot;)\rconst descTag = popupBox.querySelector(\u0026quot;textarea\u0026quot;)\rconst addBtn = popupBox.querySelector(\u0026quot;button\u0026quot;)\rlet existingId = null;\rconst notes = JSON.parse(localStorage.getItem('notes') || '[]')\rconst menuel = document.querySelector('.iconel')\rconst showNotes = () =\u0026gt; {\rfetch(COMMON_NOTE_URI, {\rmethod: 'GET'\r})\r.then(response =\u0026gt; response.json())\r.then(response =\u0026gt; {\rdocument.querySelectorAll('.note').forEach(note =\u0026gt; note.remove())\rresponse.forEach((note, index) =\u0026gt; {\rlet litag = `\u0026lt;li class=\u0026quot;note\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;details\u0026quot;\u0026gt;\r\u0026lt;p\u0026gt; ${note.title} \u0026lt;/p\u0026gt;\r\u0026lt;span\u0026gt;${note.description}\r\u0026lt;/span\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026quot;bottom-content\u0026quot;\u0026gt;\r\u0026lt;span\u0026gt;${note.date != null ? new Date(note.date).toLocaleDateString() + \u0026quot; \u0026quot; + new Date(note.date).toLocaleTimeString() : \u0026quot;\u0026quot;}\u0026lt;/span\u0026gt;\r\u0026lt;div class=\u0026quot;settings\u0026quot;\u0026gt;\r\u0026lt;i onclick=showMenu(this) class=\u0026quot;fa-solid fa-ellipsis iconel\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\r\u0026lt;ul class=\u0026quot;menu\u0026quot;\u0026gt;\r\u0026lt;li onclick=\u0026quot;editNote(${index},'${note.id}','${note.title}','${note.description}')\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fa-light fa-pen\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;Edit\u0026lt;/li\u0026gt;\r\u0026lt;li onclick=\u0026quot;deleteNote(${index},'${note.id}')\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fa-duotone fa-trash\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;Delete\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/li\u0026gt;`\raddBox.insertAdjacentHTML('afterend', litag)\r})\r})\r}\rfunction showMenu(elem) {\relem.parentElement.classList.add('show')\rdocument.onclick = (e) =\u0026gt; {\rif (e.target.tagName != 'I' || e.target != elem) {\relem.parentElement.classList.remove('show')\r}\r}\r// console.log(elem)\r}\rfunction deleteNote(index, noteId) {\rfetch(COMMON_NOTE_URI, {\rmethod: 'DELETE',\rbody: JSON.stringify({ id: noteId })\r})\r.then(response =\u0026gt; response.json())\r.then(response =\u0026gt; {\ralert(response);\rshowNotes();\r})\r}\rfunction editNote(index, noteId, title, description) {\rpopupBox.classList.add(\u0026quot;show\u0026quot;);\rexistingId = noteId;\rdocument.getElementById(\u0026quot;title\u0026quot;).value = title;\rdocument.getElementById(\u0026quot;description\u0026quot;).value = description;\r}\raddBox.onclick = () =\u0026gt; {\rpopupBox.classList.add(\u0026quot;show\u0026quot;);\r}\rcloseBox.onclick = () =\u0026gt; {\rtitleTag.value = ''\rdescTag.value = ''\rpopupBox.classList.remove(\u0026quot;show\u0026quot;);\r}\raddBtn.onclick = (e) =\u0026gt; {\rconsole.log(e);\re.preventDefault()\r// menuel.classList.add('hide-icon')\rlet title = titleTag.value;\rlet desc = descTag.value;\rlet noteInfo = {\rid: `${existingId ? existingId : generateUUID()}`,\rtitle: title,\rdescription: desc,\rdate: `${new Date()}`\r}\rfetch(COMMON_NOTE_URI, {\rmethod: 'POST',\rbody: JSON.stringify(noteInfo)\r})\r.then(response =\u0026gt; response.json())\r.then(response =\u0026gt; {\ralert('Save successfully')\rshowNotes();\r})\rcloseBox.click();\r}\rfunction generateUUID() { // Public Domain/MIT\rvar d = new Date().getTime();//Timestamp\rvar d2 = ((typeof performance !== 'undefined') \u0026amp;\u0026amp; performance.now \u0026amp;\u0026amp; (performance.now() * 1000)) || 0;//Time in microseconds since page-load or 0 if unsupported\rreturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\rvar r = Math.random() * 16;//random number between 0 and 16\rif (d \u0026gt; 0) {//Use timestamp until depleted\rr = (d + r) % 16 | 0;\rd = Math.floor(d / 16);\r} else {//Use microseconds since page-load if supported\rr = (d2 + r) % 16 | 0;\rd2 = Math.floor(d2 / 16);\r}\rreturn (c === 'x' ? r : (r \u0026amp; 0x3 | 0x8)).toString(16);\r});\r}\rshowNotes()\rconsole.log(existingId); "
},
{
	"uri": "//localhost:1313/vi/2-hands-on/2.1-build-serverless-application/2.1.6.-create-api-gateway/",
	"title": "Tạo API Gateway",
	"tags": [],
	"description": "",
	"content": "Tạo API Gateway Để tạo API Gateway trong AWS, hãy làm theo các bước sau:\n1. Truy cập https://console.aws.amazon.com/ và đăng nhập vào tài khoản AWS của bạn. 2. Truy cập https://us-east-1.console.aws.amazon.com/apigateway/main/apis?khu vực=us-east-1 3. Nhấp để Tạo API, chọn REST API nhấp vào Xây dựngChọn API mới và điền tên API của bạn, loại điểm cuối API chọn Khu vực và Tạo API Trong Amazon API Gateway, có ba loại điểm cuối API mà bạn có thể chọn khi tạo API REST: Khu vực, Tối ưu hóa biên và Riêng tư.\nĐiểm cuối khu vực: Điểm cuối khu vực được triển khai trong một Khu vực AWS cụ thể và chỉ có thể truy cập được từ trong Khu vực đó. Điểm cuối khu vực này phù hợp với các ứng dụng mà tất cả lưu lượng API đều bắt nguồn từ trong cùng Khu vực AWS khi triển khai Cổng API. Điểm cuối khu vực cung cấp độ trễ thấp và lý tưởng cho các dịch vụ phụ trợ cũng được triển khai trong cùng Khu vực AWS.\nĐiểm cuối được tối ưu hóa cho biên: Một điểm cuối được tối ưu hóa cho biên được triển khai tới các vị trí biên của AWS CloudFront, được phân phối trên toàn cầu. Các yêu cầu tới API được định tuyến đến vị trí biên của CloudFront gần nhất, giúp giảm độ trễ cho các máy khách trên toàn thế giới. Loại điểm cuối này tận dụng AWS cơ sở hạ tầng mạng toàn cầu do CloudFront cung cấp, lý tưởng cho các ứng dụng được phân phối trên toàn cầu. Đây là loại điểm cuối mặc định khi tạo API trong API Gateway.\nĐiểm cuối riêng tư: Điểm cuối riêng tư chỉ có thể truy cập được từ bên trong Amazon Virtual Private Cloud (VPC) của bạn bằng cách sử dụng điểm cuối VPC giao diện. Nó phù hợp với các tình huống mà bạn muốn hiển thị API của mình cho các tài nguyên trong VPC hoặc các mạng được kết nối khác thông qua AWS Direct Connect hoặc AWS VPN. Điểm cuối riêng tư cung cấp khả năng bảo mật nâng cao bằng cách duy trì lưu lượng truy cập trong mạng riêng, giảm khả năng tiếp xúc với Internet công cộng.\n4. Tạo tài nguyên để tạo Đường dẫn chính cho API. Tiếp theo, định cấu hình đường dẫn của bạn như bên dưới và ghi nhớ CORS (Chia sẻ tài nguyên nguồn gốc chéo) Chia sẻ tài nguyên giữa các nguồn gốc (CORS) là một tính năng bảo mật được trình duyệt web triển khai để ngăn các tập lệnh chạy trên một miền thực hiện yêu cầu sang một miền khác. Khi bạn đang sử dụng Amazon API Gateway để tạo API REST, bạn có thể cần định cấu hình CORS để cho phép các ứng dụng khách chạy trên trình duyệt web có nguồn gốc khác nhau truy cập API của bạn. Sau khi tạo tài nguyên, bây giờ chúng ta phải tạo một số ánh xạ phương thức với hàm lambda, nhấp vào Tạo phương thức\n5. Sau khi tạo xong tài nguyên, bây giờ chúng ta tạo một số phương thức ánh xạ với hàm lambda, nhấn Create Method Tại đây, chúng tôi chọn Loại phương thức: GET/POST/DELETE Loại tích hợp: Hàm Lambda Hàm Lambda: chọn hàm lambda của bạn tạo ở bước trước Bấm vào Tạo phương thức, sau khi tạo xong chúng ta có phương thức như hình bên dưới. 6. Click to tab Test to test API, click Test to test APIs Chúng tôi đã nhận được phản hồi như hình trên. Tiếp theo, tạo phương thức tương tự với phương thức POST, DELETE tích hợp với LambdaDeleteDataFunction, LambdaAddDataFunction\n7. After done, we have to click Deploy API to expose API over internet Click Deploy API Điền tên Stage và mô tả Triển khai của bạn, sau khi nhấp vào Triển khai, chúng tôi đã nhận được phản hồi bên dưới Hãy kiểm tra URL gọi: https://q3q8l57ui9.execute-api.us-east-1.amazonaws.com/prod đây là URL công khai mà chúng tôi có thể gọi trên internet công cộng. Sau khi nhận được API công khai URL, bạn có thể kiểm tra bằng công cụ POSTMAN, TERMINAL Bạn có thể thử với Yêu cầu cuộn tròn với mẫu: cuộn tròn -X GET {{YourInvoke URL}}/{{Stage}}/{{YourAPIs}} Example:\ncurl -X GET https://q3q8l57ui9.execute-api.us-east-1.amazonaws.com/dev/notes\r"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Giới thiệu Hành trình 100 Days Cloud",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Series 100 Days Cloud Tổng quan AWS là viết tắt của Dịch vụ web của Amazon. Đây là một nền tảng điện toán đám mây toàn diện và được sử dụng rộng rãi do Amazon.com cung cấp. Ra mắt vào năm 2006, AWS cung cấp một loạt dịch vụ bao gồm sức mạnh tính toán, tùy chọn lưu trữ, khả năng kết nối mạng, cơ sở dữ liệu, machine learning và các công cụ AI, cùng nhiều dịch vụ khác, tất cả đều được cung cấp qua internet.\nNội dung Giới thiệu về dịch vụ chính của Amazon Loạt bài thực hành "
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]